<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1062" onload="init(evt)" viewBox="0 0 1200 1062" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1062" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1045.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1045.00"> </text><svg id="frames" x="10" width="1180" total_samples="461955610"><g><title>&lt;tokio::runtime::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (278,707 samples, 0.06%)</title><rect x="0.0000%" y="981" width="0.0603%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="278707"/><text x="0.2500%" y="991.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (278,707 samples, 0.06%)</title><rect x="0.0000%" y="965" width="0.0603%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="278707"/><text x="0.2500%" y="975.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,055,404 samples, 0.23%)</title><rect x="0.0603%" y="981" width="0.2285%" height="15" fill="rgb(221,193,54)" fg:x="278707" fg:w="1055404"/><text x="0.3103%" y="991.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,008,768 samples, 0.22%)</title><rect x="0.0704%" y="965" width="0.2184%" height="15" fill="rgb(248,212,6)" fg:x="325343" fg:w="1008768"/><text x="0.3204%" y="975.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,008,768 samples, 0.22%)</title><rect x="0.0704%" y="949" width="0.2184%" height="15" fill="rgb(208,68,35)" fg:x="325343" fg:w="1008768"/><text x="0.3204%" y="959.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,008,768 samples, 0.22%)</title><rect x="0.0704%" y="933" width="0.2184%" height="15" fill="rgb(232,128,0)" fg:x="325343" fg:w="1008768"/><text x="0.3204%" y="943.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,008,768 samples, 0.22%)</title><rect x="0.0704%" y="917" width="0.2184%" height="15" fill="rgb(207,160,47)" fg:x="325343" fg:w="1008768"/><text x="0.3204%" y="927.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,008,768 samples, 0.22%)</title><rect x="0.0704%" y="901" width="0.2184%" height="15" fill="rgb(228,23,34)" fg:x="325343" fg:w="1008768"/><text x="0.3204%" y="911.50"></text></g><g><title>[libc.so.6] (333,225 samples, 0.07%)</title><rect x="0.2888%" y="981" width="0.0721%" height="15" fill="rgb(218,30,26)" fg:x="1334111" fg:w="333225"/><text x="0.5388%" y="991.50"></text></g><g><title>[libc.so.6] (135,107 samples, 0.03%)</title><rect x="0.3317%" y="965" width="0.0292%" height="15" fill="rgb(220,122,19)" fg:x="1532229" fg:w="135107"/><text x="0.5817%" y="975.50"></text></g><g><title>emi_web (1,677,455 samples, 0.36%)</title><rect x="0.0000%" y="997" width="0.3631%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1677455"/><text x="0.2500%" y="1007.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (5,720,296 samples, 1.24%)</title><rect x="0.3631%" y="965" width="1.2383%" height="15" fill="rgb(240,193,28)" fg:x="1677455" fg:w="5720296"/><text x="0.6131%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,733,420 samples, 0.38%)</title><rect x="1.6014%" y="965" width="0.3752%" height="15" fill="rgb(216,20,37)" fg:x="7397751" fg:w="1733420"/><text x="1.8514%" y="975.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,286,876 samples, 0.93%)</title><rect x="1.9766%" y="965" width="0.9280%" height="15" fill="rgb(206,188,39)" fg:x="9131171" fg:w="4286876"/><text x="2.2266%" y="975.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,286,876 samples, 0.93%)</title><rect x="1.9766%" y="949" width="0.9280%" height="15" fill="rgb(217,207,13)" fg:x="9131171" fg:w="4286876"/><text x="2.2266%" y="959.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (4,286,876 samples, 0.93%)</title><rect x="1.9766%" y="933" width="0.9280%" height="15" fill="rgb(231,73,38)" fg:x="9131171" fg:w="4286876"/><text x="2.2266%" y="943.50"></text></g><g><title>&lt;tokio_tungstenite::compat::AllowStd&lt;S&gt; as std::io::Write&gt;::flush (1,566,250 samples, 0.34%)</title><rect x="2.9046%" y="965" width="0.3390%" height="15" fill="rgb(225,20,46)" fg:x="13418047" fg:w="1566250"/><text x="3.1546%" y="975.50"></text></g><g><title>&lt;tui_big_text::big_text::BigText as ratatui::widgets::Widget&gt;::render (3,269,978 samples, 0.71%)</title><rect x="3.2437%" y="965" width="0.7079%" height="15" fill="rgb(210,31,41)" fg:x="14984297" fg:w="3269978"/><text x="3.4937%" y="975.50"></text></g><g><title>tui_big_text::big_text::render_symbol (3,269,978 samples, 0.71%)</title><rect x="3.2437%" y="949" width="0.7079%" height="15" fill="rgb(221,200,47)" fg:x="14984297" fg:w="3269978"/><text x="3.4937%" y="959.50"></text></g><g><title>tui_big_text::big_text::render_glyph (3,269,978 samples, 0.71%)</title><rect x="3.2437%" y="933" width="0.7079%" height="15" fill="rgb(226,26,5)" fg:x="14984297" fg:w="3269978"/><text x="3.4937%" y="943.50"></text></g><g><title>core::ffi::c_str::CStr::from_bytes_with_nul (579,603 samples, 0.13%)</title><rect x="3.9515%" y="965" width="0.1255%" height="15" fill="rgb(249,33,26)" fg:x="18254275" fg:w="579603"/><text x="4.2015%" y="975.50"></text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (5,782,429 samples, 1.25%)</title><rect x="4.0770%" y="965" width="1.2517%" height="15" fill="rgb(235,183,28)" fg:x="18833878" fg:w="5782429"/><text x="4.3270%" y="975.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::rfold (19,936,534 samples, 4.32%)</title><rect x="5.3287%" y="965" width="4.3157%" height="15" fill="rgb(221,5,38)" fg:x="24616307" fg:w="19936534"/><text x="5.5787%" y="975.50">core:..</text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1,661,761 samples, 0.36%)</title><rect x="9.6444%" y="965" width="0.3597%" height="15" fill="rgb(247,18,42)" fg:x="44552841" fg:w="1661761"/><text x="9.8944%" y="975.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (1,601,631 samples, 0.35%)</title><rect x="10.0041%" y="965" width="0.3467%" height="15" fill="rgb(241,131,45)" fg:x="46214602" fg:w="1601631"/><text x="10.2541%" y="975.50"></text></g><g><title>ratatui::layout::layout::Layout::split_with_spacers (404,577 samples, 0.09%)</title><rect x="10.3508%" y="965" width="0.0876%" height="15" fill="rgb(249,31,29)" fg:x="47816233" fg:w="404577"/><text x="10.6008%" y="975.50"></text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut (404,577 samples, 0.09%)</title><rect x="10.3508%" y="949" width="0.0876%" height="15" fill="rgb(225,111,53)" fg:x="47816233" fg:w="404577"/><text x="10.6008%" y="959.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (404,577 samples, 0.09%)</title><rect x="10.3508%" y="933" width="0.0876%" height="15" fill="rgb(238,160,17)" fg:x="47816233" fg:w="404577"/><text x="10.6008%" y="943.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (404,577 samples, 0.09%)</title><rect x="10.3508%" y="917" width="0.0876%" height="15" fill="rgb(214,148,48)" fg:x="47816233" fg:w="404577"/><text x="10.6008%" y="927.50"></text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut::_{{closure}} (404,577 samples, 0.09%)</title><rect x="10.3508%" y="901" width="0.0876%" height="15" fill="rgb(232,36,49)" fg:x="47816233" fg:w="404577"/><text x="10.6008%" y="911.50"></text></g><g><title>ratatui::layout::layout::Layout::split_with_spacers::_{{closure}} (404,577 samples, 0.09%)</title><rect x="10.3508%" y="885" width="0.0876%" height="15" fill="rgb(209,103,24)" fg:x="47816233" fg:w="404577"/><text x="10.6008%" y="895.50"></text></g><g><title>&lt;ratatui::layout::layout::Layout as core::clone::Clone&gt;::clone (404,577 samples, 0.09%)</title><rect x="10.3508%" y="869" width="0.0876%" height="15" fill="rgb(229,88,8)" fg:x="47816233" fg:w="404577"/><text x="10.6008%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (404,577 samples, 0.09%)</title><rect x="10.3508%" y="853" width="0.0876%" height="15" fill="rgb(213,181,19)" fg:x="47816233" fg:w="404577"/><text x="10.6008%" y="863.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (404,577 samples, 0.09%)</title><rect x="10.3508%" y="837" width="0.0876%" height="15" fill="rgb(254,191,54)" fg:x="47816233" fg:w="404577"/><text x="10.6008%" y="847.50"></text></g><g><title>alloc::slice::hack::to_vec (404,577 samples, 0.09%)</title><rect x="10.3508%" y="821" width="0.0876%" height="15" fill="rgb(241,83,37)" fg:x="47816233" fg:w="404577"/><text x="10.6008%" y="831.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (404,577 samples, 0.09%)</title><rect x="10.3508%" y="805" width="0.0876%" height="15" fill="rgb(233,36,39)" fg:x="47816233" fg:w="404577"/><text x="10.6008%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (404,577 samples, 0.09%)</title><rect x="10.3508%" y="789" width="0.0876%" height="15" fill="rgb(226,3,54)" fg:x="47816233" fg:w="404577"/><text x="10.6008%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (404,577 samples, 0.09%)</title><rect x="10.3508%" y="773" width="0.0876%" height="15" fill="rgb(245,192,40)" fg:x="47816233" fg:w="404577"/><text x="10.6008%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (404,577 samples, 0.09%)</title><rect x="10.3508%" y="757" width="0.0876%" height="15" fill="rgb(238,167,29)" fg:x="47816233" fg:w="404577"/><text x="10.6008%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (404,577 samples, 0.09%)</title><rect x="10.3508%" y="741" width="0.0876%" height="15" fill="rgb(232,182,51)" fg:x="47816233" fg:w="404577"/><text x="10.6008%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (404,577 samples, 0.09%)</title><rect x="10.3508%" y="725" width="0.0876%" height="15" fill="rgb(231,60,39)" fg:x="47816233" fg:w="404577"/><text x="10.6008%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (404,577 samples, 0.09%)</title><rect x="10.3508%" y="709" width="0.0876%" height="15" fill="rgb(208,69,12)" fg:x="47816233" fg:w="404577"/><text x="10.6008%" y="719.50"></text></g><g><title>alloc::alloc::alloc (404,577 samples, 0.09%)</title><rect x="10.3508%" y="693" width="0.0876%" height="15" fill="rgb(235,93,37)" fg:x="47816233" fg:w="404577"/><text x="10.6008%" y="703.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (445,485 samples, 0.10%)</title><rect x="10.4384%" y="965" width="0.0964%" height="15" fill="rgb(213,116,39)" fg:x="48220810" fg:w="445485"/><text x="10.6884%" y="975.50"></text></g><g><title>std::time::Instant::now (232,864 samples, 0.05%)</title><rect x="10.5348%" y="965" width="0.0504%" height="15" fill="rgb(222,207,29)" fg:x="48666295" fg:w="232864"/><text x="10.7848%" y="975.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1,203,704 samples, 0.26%)</title><rect x="10.5853%" y="965" width="0.2606%" height="15" fill="rgb(206,96,30)" fg:x="48899159" fg:w="1203704"/><text x="10.8353%" y="975.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (1,203,704 samples, 0.26%)</title><rect x="10.5853%" y="949" width="0.2606%" height="15" fill="rgb(218,138,4)" fg:x="48899159" fg:w="1203704"/><text x="10.8353%" y="959.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1,288,099 samples, 0.28%)</title><rect x="10.8458%" y="965" width="0.2788%" height="15" fill="rgb(250,191,14)" fg:x="50102863" fg:w="1288099"/><text x="11.0958%" y="975.50"></text></g><g><title>tokio_tungstenite::compat::cvt (1,605,738 samples, 0.35%)</title><rect x="11.1247%" y="965" width="0.3476%" height="15" fill="rgb(239,60,40)" fg:x="51390962" fg:w="1605738"/><text x="11.3747%" y="975.50"></text></g><g><title>[anon] (52,670,923 samples, 11.40%)</title><rect x="0.3631%" y="981" width="11.4017%" height="15" fill="rgb(206,27,48)" fg:x="1677455" fg:w="52670923"/><text x="0.6131%" y="991.50">[anon]</text></g><g><title>tungstenite::buffer::ReadBuffer&lt;_&gt;::read_from (1,351,678 samples, 0.29%)</title><rect x="11.4722%" y="965" width="0.2926%" height="15" fill="rgb(225,35,8)" fg:x="52996700" fg:w="1351678"/><text x="11.7222%" y="975.50"></text></g><g><title>tungstenite::buffer::ReadBuffer&lt;_&gt;::clean_up (1,351,678 samples, 0.29%)</title><rect x="11.4722%" y="949" width="0.2926%" height="15" fill="rgb(250,213,24)" fg:x="52996700" fg:w="1351678"/><text x="11.7222%" y="959.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::drain (1,351,678 samples, 0.29%)</title><rect x="11.4722%" y="933" width="0.2926%" height="15" fill="rgb(247,123,22)" fg:x="52996700" fg:w="1351678"/><text x="11.7222%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1,351,678 samples, 0.29%)</title><rect x="11.4722%" y="917" width="0.2926%" height="15" fill="rgb(231,138,38)" fg:x="52996700" fg:w="1351678"/><text x="11.7222%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,217,148 samples, 0.26%)</title><rect x="11.7648%" y="965" width="0.2635%" height="15" fill="rgb(231,145,46)" fg:x="54348378" fg:w="1217148"/><text x="12.0148%" y="975.50"></text></g><g><title>[emi_web] (5,303,296 samples, 1.15%)</title><rect x="11.7648%" y="981" width="1.1480%" height="15" fill="rgb(251,118,11)" fg:x="54348378" fg:w="5303296"/><text x="12.0148%" y="991.50"></text></g><g><title>__rdl_dealloc (4,086,148 samples, 0.88%)</title><rect x="12.0283%" y="965" width="0.8845%" height="15" fill="rgb(217,147,25)" fg:x="55565526" fg:w="4086148"/><text x="12.2783%" y="975.50"></text></g><g><title>pow (248,998 samples, 0.05%)</title><rect x="12.9174%" y="789" width="0.0539%" height="15" fill="rgb(247,81,37)" fg:x="59672445" fg:w="248998"/><text x="13.1674%" y="799.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::stats::Stats::end_processing_scheduled_tasks (1,677,038 samples, 0.36%)</title><rect x="12.9713%" y="789" width="0.3630%" height="15" fill="rgb(209,12,38)" fg:x="59921443" fg:w="1677038"/><text x="13.2213%" y="799.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::powf (1,677,038 samples, 0.36%)</title><rect x="12.9713%" y="773" width="0.3630%" height="15" fill="rgb(227,1,9)" fg:x="59921443" fg:w="1677038"/><text x="13.2213%" y="783.50"></text></g><g><title>epoll_wait (63,062 samples, 0.01%)</title><rect x="13.3343%" y="709" width="0.0137%" height="15" fill="rgb(248,47,43)" fg:x="61598481" fg:w="63062"/><text x="13.5843%" y="719.50"></text></g><g><title>mio::poll::Poll::poll (1,579,034 samples, 0.34%)</title><rect x="13.3343%" y="725" width="0.3418%" height="15" fill="rgb(221,10,30)" fg:x="61598481" fg:w="1579034"/><text x="13.5843%" y="735.50"></text></g><g><title>mio::sys::unix::selector::Selector::select (1,515,972 samples, 0.33%)</title><rect x="13.3479%" y="709" width="0.3282%" height="15" fill="rgb(210,229,1)" fg:x="61661543" fg:w="1515972"/><text x="13.5979%" y="719.50"></text></g><g><title>_ZN5tokio7runtime4time6Driver13park_internal17h1ba30c3a34940e98E.llvm.10020844852150324237 (1,923,140 samples, 0.42%)</title><rect x="13.3343%" y="757" width="0.4163%" height="15" fill="rgb(222,148,37)" fg:x="61598481" fg:w="1923140"/><text x="13.5843%" y="767.50"></text></g><g><title>_ZN5tokio7runtime2io6driver6Driver4turn17h5854b4bfbac9773dE.llvm.9045573329497988480 (1,923,140 samples, 0.42%)</title><rect x="13.3343%" y="741" width="0.4163%" height="15" fill="rgb(234,67,33)" fg:x="61598481" fg:w="1923140"/><text x="13.5843%" y="751.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (344,106 samples, 0.07%)</title><rect x="13.6761%" y="725" width="0.0745%" height="15" fill="rgb(247,98,35)" fg:x="63177515" fg:w="344106"/><text x="13.9261%" y="735.50"></text></g><g><title>_ZN5tokio7runtime4park4wake17h7fddd5b846efbdf3E.llvm.6874703583370553890 (344,106 samples, 0.07%)</title><rect x="13.6761%" y="709" width="0.0745%" height="15" fill="rgb(247,138,52)" fg:x="63177515" fg:w="344106"/><text x="13.9261%" y="719.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (344,106 samples, 0.07%)</title><rect x="13.6761%" y="693" width="0.0745%" height="15" fill="rgb(213,79,30)" fg:x="63177515" fg:w="344106"/><text x="13.9261%" y="703.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (344,106 samples, 0.07%)</title><rect x="13.6761%" y="677" width="0.0745%" height="15" fill="rgb(246,177,23)" fg:x="63177515" fg:w="344106"/><text x="13.9261%" y="687.50"></text></g><g><title>tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (67,109 samples, 0.01%)</title><rect x="14.1191%" y="741" width="0.0145%" height="15" fill="rgb(230,62,27)" fg:x="65223839" fg:w="67109"/><text x="14.3691%" y="751.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::try_lock (67,109 samples, 0.01%)</title><rect x="14.1191%" y="725" width="0.0145%" height="15" fill="rgb(216,154,8)" fg:x="65223839" fg:w="67109"/><text x="14.3691%" y="735.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::try_lock (67,109 samples, 0.01%)</title><rect x="14.1191%" y="709" width="0.0145%" height="15" fill="rgb(244,35,45)" fg:x="65223839" fg:w="67109"/><text x="14.3691%" y="719.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::try_lock (67,109 samples, 0.01%)</title><rect x="14.1191%" y="693" width="0.0145%" height="15" fill="rgb(251,115,12)" fg:x="65223839" fg:w="67109"/><text x="14.3691%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (67,109 samples, 0.01%)</title><rect x="14.1191%" y="677" width="0.0145%" height="15" fill="rgb(240,54,50)" fg:x="65223839" fg:w="67109"/><text x="14.3691%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (67,109 samples, 0.01%)</title><rect x="14.1191%" y="661" width="0.0145%" height="15" fill="rgb(233,84,52)" fg:x="65223839" fg:w="67109"/><text x="14.3691%" y="671.50"></text></g><g><title>tokio::runtime::time::ShardedWheel::lock_sharded_wheel (3,077,437 samples, 0.67%)</title><rect x="14.1336%" y="549" width="0.6662%" height="15" fill="rgb(207,117,47)" fg:x="65290948" fg:w="3077437"/><text x="14.3836%" y="559.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (3,077,437 samples, 0.67%)</title><rect x="14.1336%" y="533" width="0.6662%" height="15" fill="rgb(249,43,39)" fg:x="65290948" fg:w="3077437"/><text x="14.3836%" y="543.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (3,077,437 samples, 0.67%)</title><rect x="14.1336%" y="517" width="0.6662%" height="15" fill="rgb(209,38,44)" fg:x="65290948" fg:w="3077437"/><text x="14.3836%" y="527.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (3,077,437 samples, 0.67%)</title><rect x="14.1336%" y="501" width="0.6662%" height="15" fill="rgb(236,212,23)" fg:x="65290948" fg:w="3077437"/><text x="14.3836%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (3,077,437 samples, 0.67%)</title><rect x="14.1336%" y="485" width="0.6662%" height="15" fill="rgb(242,79,21)" fg:x="65290948" fg:w="3077437"/><text x="14.3836%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (3,077,437 samples, 0.67%)</title><rect x="14.1336%" y="469" width="0.6662%" height="15" fill="rgb(211,96,35)" fg:x="65290948" fg:w="3077437"/><text x="14.3836%" y="479.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (1,923,915 samples, 0.42%)</title><rect x="14.7998%" y="533" width="0.4165%" height="15" fill="rgb(253,215,40)" fg:x="68368385" fg:w="1923915"/><text x="15.0498%" y="543.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (1,923,915 samples, 0.42%)</title><rect x="14.7998%" y="517" width="0.4165%" height="15" fill="rgb(211,81,21)" fg:x="68368385" fg:w="1923915"/><text x="15.0498%" y="527.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll (2,703,646 samples, 0.59%)</title><rect x="14.7998%" y="549" width="0.5853%" height="15" fill="rgb(208,190,38)" fg:x="68368385" fg:w="2703646"/><text x="15.0498%" y="559.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::process_expiration (779,731 samples, 0.17%)</title><rect x="15.2162%" y="533" width="0.1688%" height="15" fill="rgb(235,213,38)" fg:x="70292300" fg:w="779731"/><text x="15.4662%" y="543.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::pop_back (779,731 samples, 0.17%)</title><rect x="15.2162%" y="517" width="0.1688%" height="15" fill="rgb(237,122,38)" fg:x="70292300" fg:w="779731"/><text x="15.4662%" y="527.50"></text></g><g><title>tokio::util::linked_list::Pointers&lt;T&gt;::get_prev (779,731 samples, 0.17%)</title><rect x="15.2162%" y="501" width="0.1688%" height="15" fill="rgb(244,218,35)" fg:x="70292300" fg:w="779731"/><text x="15.4662%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (779,731 samples, 0.17%)</title><rect x="15.2162%" y="485" width="0.1688%" height="15" fill="rgb(240,68,47)" fg:x="70292300" fg:w="779731"/><text x="15.4662%" y="495.50"></text></g><g><title>core::ptr::read (779,731 samples, 0.17%)</title><rect x="15.2162%" y="469" width="0.1688%" height="15" fill="rgb(210,16,53)" fg:x="70292300" fg:w="779731"/><text x="15.4662%" y="479.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (10,966,499 samples, 2.37%)</title><rect x="13.3343%" y="789" width="2.3739%" height="15" fill="rgb(235,124,12)" fg:x="61598481" fg:w="10966499"/><text x="13.5843%" y="799.50">to..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (10,966,499 samples, 2.37%)</title><rect x="13.3343%" y="773" width="2.3739%" height="15" fill="rgb(224,169,11)" fg:x="61598481" fg:w="10966499"/><text x="13.5843%" y="783.50">to..</text></g><g><title>tokio::runtime::time::Driver::park_internal (9,011,408 samples, 1.95%)</title><rect x="13.7575%" y="757" width="1.9507%" height="15" fill="rgb(250,166,2)" fg:x="63553572" fg:w="9011408"/><text x="14.0075%" y="767.50">t..</text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process (7,274,032 samples, 1.57%)</title><rect x="14.1336%" y="741" width="1.5746%" height="15" fill="rgb(242,216,29)" fg:x="65290948" fg:w="7274032"/><text x="14.3836%" y="751.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (7,274,032 samples, 1.57%)</title><rect x="14.1336%" y="725" width="1.5746%" height="15" fill="rgb(230,116,27)" fg:x="65290948" fg:w="7274032"/><text x="14.3836%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min (7,274,032 samples, 1.57%)</title><rect x="14.1336%" y="709" width="1.5746%" height="15" fill="rgb(228,99,48)" fg:x="65290948" fg:w="7274032"/><text x="14.3836%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (7,274,032 samples, 1.57%)</title><rect x="14.1336%" y="693" width="1.5746%" height="15" fill="rgb(253,11,6)" fg:x="65290948" fg:w="7274032"/><text x="14.3836%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (7,274,032 samples, 1.57%)</title><rect x="14.1336%" y="677" width="1.5746%" height="15" fill="rgb(247,143,39)" fg:x="65290948" fg:w="7274032"/><text x="14.3836%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,274,032 samples, 1.57%)</title><rect x="14.1336%" y="661" width="1.5746%" height="15" fill="rgb(236,97,10)" fg:x="65290948" fg:w="7274032"/><text x="14.3836%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (7,274,032 samples, 1.57%)</title><rect x="14.1336%" y="645" width="1.5746%" height="15" fill="rgb(233,208,19)" fg:x="65290948" fg:w="7274032"/><text x="14.3836%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (7,274,032 samples, 1.57%)</title><rect x="14.1336%" y="629" width="1.5746%" height="15" fill="rgb(216,164,2)" fg:x="65290948" fg:w="7274032"/><text x="14.3836%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (7,274,032 samples, 1.57%)</title><rect x="14.1336%" y="613" width="1.5746%" height="15" fill="rgb(220,129,5)" fg:x="65290948" fg:w="7274032"/><text x="14.3836%" y="623.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (7,274,032 samples, 1.57%)</title><rect x="14.1336%" y="597" width="1.5746%" height="15" fill="rgb(242,17,10)" fg:x="65290948" fg:w="7274032"/><text x="14.3836%" y="607.50"></text></g><g><title>tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time::_{{closure}} (7,274,032 samples, 1.57%)</title><rect x="14.1336%" y="581" width="1.5746%" height="15" fill="rgb(242,107,0)" fg:x="65290948" fg:w="7274032"/><text x="14.3836%" y="591.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_sharded_time (7,274,032 samples, 1.57%)</title><rect x="14.1336%" y="565" width="1.5746%" height="15" fill="rgb(251,28,31)" fg:x="65290948" fg:w="7274032"/><text x="14.3836%" y="575.50"></text></g><g><title>tokio::util::wake_list::WakeList::wake_all (1,492,949 samples, 0.32%)</title><rect x="15.3850%" y="549" width="0.3232%" height="15" fill="rgb(233,223,10)" fg:x="71072031" fg:w="1492949"/><text x="15.6350%" y="559.50"></text></g><g><title>core::task::wake::Waker::wake (1,492,949 samples, 0.32%)</title><rect x="15.3850%" y="533" width="0.3232%" height="15" fill="rgb(215,21,27)" fg:x="71072031" fg:w="1492949"/><text x="15.6350%" y="543.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1,492,949 samples, 0.32%)</title><rect x="15.3850%" y="517" width="0.3232%" height="15" fill="rgb(232,23,21)" fg:x="71072031" fg:w="1492949"/><text x="15.6350%" y="527.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (1,492,949 samples, 0.32%)</title><rect x="15.3850%" y="501" width="0.3232%" height="15" fill="rgb(244,5,23)" fg:x="71072031" fg:w="1492949"/><text x="15.6350%" y="511.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::schedule (1,492,949 samples, 0.32%)</title><rect x="15.3850%" y="485" width="0.3232%" height="15" fill="rgb(226,81,46)" fg:x="71072031" fg:w="1492949"/><text x="15.6350%" y="495.50"></text></g><g><title>tokio::runtime::task::raw::schedule (1,492,949 samples, 0.32%)</title><rect x="15.3850%" y="469" width="0.3232%" height="15" fill="rgb(247,70,30)" fg:x="71072031" fg:w="1492949"/><text x="15.6350%" y="479.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::reset_lifo_enabled (1,983,421 samples, 0.43%)</title><rect x="15.7082%" y="725" width="0.4294%" height="15" fill="rgb(212,68,19)" fg:x="72564980" fg:w="1983421"/><text x="15.9582%" y="735.50"></text></g><g><title>&lt;axum::serve::Serve&lt;M,S&gt; as core::future::into_future::IntoFuture&gt;::into_future::_{{closure}}::_{{closure}} (4,928,573 samples, 1.07%)</title><rect x="16.1376%" y="517" width="1.0669%" height="15" fill="rgb(240,187,13)" fg:x="74548401" fg:w="4928573"/><text x="16.3876%" y="527.50"></text></g><g><title>&lt;hyper_util::server::conn::auto::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (4,928,573 samples, 1.07%)</title><rect x="16.1376%" y="501" width="1.0669%" height="15" fill="rgb(223,113,26)" fg:x="74548401" fg:w="4928573"/><text x="16.3876%" y="511.50"></text></g><g><title>&lt;hyper::server::conn::http1::UpgradeableConnection&lt;I,S&gt; as core::future::future::Future&gt;::poll (4,928,573 samples, 1.07%)</title><rect x="16.1376%" y="485" width="1.0669%" height="15" fill="rgb(206,192,2)" fg:x="74548401" fg:w="4928573"/><text x="16.3876%" y="495.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future::Future&gt;::poll (4,928,573 samples, 1.07%)</title><rect x="16.1376%" y="469" width="1.0669%" height="15" fill="rgb(241,108,4)" fg:x="74548401" fg:w="4928573"/><text x="16.3876%" y="479.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (4,928,573 samples, 1.07%)</title><rect x="16.1376%" y="453" width="1.0669%" height="15" fill="rgb(247,173,49)" fg:x="74548401" fg:w="4928573"/><text x="16.3876%" y="463.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner (4,928,573 samples, 1.07%)</title><rect x="16.1376%" y="437" width="1.0669%" height="15" fill="rgb(224,114,35)" fg:x="74548401" fg:w="4928573"/><text x="16.3876%" y="447.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (4,928,573 samples, 1.07%)</title><rect x="16.1376%" y="421" width="1.0669%" height="15" fill="rgb(245,159,27)" fg:x="74548401" fg:w="4928573"/><text x="16.3876%" y="431.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_write (4,928,573 samples, 1.07%)</title><rect x="16.1376%" y="405" width="1.0669%" height="15" fill="rgb(245,172,44)" fg:x="74548401" fg:w="4928573"/><text x="16.3876%" y="415.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::incoming::Incoming&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::poll_msg (4,928,573 samples, 1.07%)</title><rect x="16.1376%" y="389" width="1.0669%" height="15" fill="rgb(236,23,11)" fg:x="74548401" fg:w="4928573"/><text x="16.3876%" y="399.50"></text></g><g><title>&lt;hyper_util::service::glue::TowerToHyperServiceFuture&lt;S,R&gt; as core::future::future::Future&gt;::poll (4,928,573 samples, 1.07%)</title><rect x="16.1376%" y="373" width="1.0669%" height="15" fill="rgb(205,117,38)" fg:x="74548401" fg:w="4928573"/><text x="16.3876%" y="383.50"></text></g><g><title>&lt;hyper_util::service::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (4,928,573 samples, 1.07%)</title><rect x="16.1376%" y="357" width="1.0669%" height="15" fill="rgb(237,72,25)" fg:x="74548401" fg:w="4928573"/><text x="16.3876%" y="367.50"></text></g><g><title>&lt;axum::routing::route::RouteFuture&lt;E&gt; as core::future::future::Future&gt;::poll (4,928,573 samples, 1.07%)</title><rect x="16.1376%" y="341" width="1.0669%" height="15" fill="rgb(244,70,9)" fg:x="74548401" fg:w="4928573"/><text x="16.3876%" y="351.50"></text></g><g><title>&lt;tower::util::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (4,928,573 samples, 1.07%)</title><rect x="16.1376%" y="325" width="1.0669%" height="15" fill="rgb(217,125,39)" fg:x="74548401" fg:w="4928573"/><text x="16.3876%" y="335.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (4,928,573 samples, 1.07%)</title><rect x="16.1376%" y="309" width="1.0669%" height="15" fill="rgb(235,36,10)" fg:x="74548401" fg:w="4928573"/><text x="16.3876%" y="319.50"></text></g><g><title>&lt;tower::util::map_response::MapResponseFuture&lt;F,N&gt; as core::future::future::Future&gt;::poll (4,928,573 samples, 1.07%)</title><rect x="16.1376%" y="293" width="1.0669%" height="15" fill="rgb(251,123,47)" fg:x="74548401" fg:w="4928573"/><text x="16.3876%" y="303.50"></text></g><g><title>&lt;futures_util::future::try_future::MapOk&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (4,928,573 samples, 1.07%)</title><rect x="16.1376%" y="277" width="1.0669%" height="15" fill="rgb(221,13,13)" fg:x="74548401" fg:w="4928573"/><text x="16.3876%" y="287.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (4,928,573 samples, 1.07%)</title><rect x="16.1376%" y="261" width="1.0669%" height="15" fill="rgb(238,131,9)" fg:x="74548401" fg:w="4928573"/><text x="16.3876%" y="271.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (4,928,573 samples, 1.07%)</title><rect x="16.1376%" y="245" width="1.0669%" height="15" fill="rgb(211,50,8)" fg:x="74548401" fg:w="4928573"/><text x="16.3876%" y="255.50"></text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (4,928,573 samples, 1.07%)</title><rect x="16.1376%" y="229" width="1.0669%" height="15" fill="rgb(245,182,24)" fg:x="74548401" fg:w="4928573"/><text x="16.3876%" y="239.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (4,928,573 samples, 1.07%)</title><rect x="16.1376%" y="213" width="1.0669%" height="15" fill="rgb(242,14,37)" fg:x="74548401" fg:w="4928573"/><text x="16.3876%" y="223.50"></text></g><g><title>&lt;axum::handler::future::IntoServiceFuture&lt;F&gt; as core::future::future::Future&gt;::poll (4,928,573 samples, 1.07%)</title><rect x="16.1376%" y="197" width="1.0669%" height="15" fill="rgb(246,228,12)" fg:x="74548401" fg:w="4928573"/><text x="16.3876%" y="207.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (4,928,573 samples, 1.07%)</title><rect x="16.1376%" y="181" width="1.0669%" height="15" fill="rgb(213,55,15)" fg:x="74548401" fg:w="4928573"/><text x="16.3876%" y="191.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (4,928,573 samples, 1.07%)</title><rect x="16.1376%" y="165" width="1.0669%" height="15" fill="rgb(209,9,3)" fg:x="74548401" fg:w="4928573"/><text x="16.3876%" y="175.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (4,928,573 samples, 1.07%)</title><rect x="16.1376%" y="149" width="1.0669%" height="15" fill="rgb(230,59,30)" fg:x="74548401" fg:w="4928573"/><text x="16.3876%" y="159.50"></text></g><g><title>&lt;F as axum::handler::Handler&lt;(M,T1,T2),S&gt;&gt;::call::_{{closure}} (4,928,573 samples, 1.07%)</title><rect x="16.1376%" y="133" width="1.0669%" height="15" fill="rgb(209,121,21)" fg:x="74548401" fg:w="4928573"/><text x="16.3876%" y="143.50"></text></g><g><title>emi_web::ui_websocket::_{{closure}} (4,928,573 samples, 1.07%)</title><rect x="16.1376%" y="117" width="1.0669%" height="15" fill="rgb(220,109,13)" fg:x="74548401" fg:w="4928573"/><text x="16.3876%" y="127.50"></text></g><g><title>axum::extract::ws::WebSocketUpgrade&lt;F&gt;::on_upgrade (4,928,573 samples, 1.07%)</title><rect x="16.1376%" y="101" width="1.0669%" height="15" fill="rgb(232,18,1)" fg:x="74548401" fg:w="4928573"/><text x="16.3876%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::join::JoinHandle&lt;()&gt;&gt; (4,928,573 samples, 1.07%)</title><rect x="16.1376%" y="85" width="1.0669%" height="15" fill="rgb(215,41,42)" fg:x="74548401" fg:w="4928573"/><text x="16.3876%" y="95.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4,928,573 samples, 1.07%)</title><rect x="16.1376%" y="69" width="1.0669%" height="15" fill="rgb(224,123,36)" fg:x="74548401" fg:w="4928573"/><text x="16.3876%" y="79.50"></text></g><g><title>tokio::runtime::task::state::State::drop_join_handle_fast (4,928,573 samples, 1.07%)</title><rect x="16.1376%" y="53" width="1.0669%" height="15" fill="rgb(240,125,3)" fg:x="74548401" fg:w="4928573"/><text x="16.3876%" y="63.50"></text></g><g><title>&lt;core::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (1,158,592 samples, 0.25%)</title><rect x="17.6338%" y="469" width="0.2508%" height="15" fill="rgb(205,98,50)" fg:x="81460395" fg:w="1158592"/><text x="17.8838%" y="479.50"></text></g><g><title>emi_web::realtime_websocket_stream::_{{closure}}::_{{closure}} (1,158,592 samples, 0.25%)</title><rect x="17.6338%" y="453" width="0.2508%" height="15" fill="rgb(205,185,37)" fg:x="81460395" fg:w="1158592"/><text x="17.8838%" y="463.50"></text></g><g><title>axum::extract::ws::WebSocket::recv::_{{closure}} (1,158,592 samples, 0.25%)</title><rect x="17.6338%" y="437" width="0.2508%" height="15" fill="rgb(238,207,15)" fg:x="81460395" fg:w="1158592"/><text x="17.8838%" y="447.50"></text></g><g><title>&lt;futures_util::stream::stream::next::Next&lt;St&gt; as core::future::future::Future&gt;::poll (1,158,592 samples, 0.25%)</title><rect x="17.6338%" y="421" width="0.2508%" height="15" fill="rgb(213,199,42)" fg:x="81460395" fg:w="1158592"/><text x="17.8838%" y="431.50"></text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (1,158,592 samples, 0.25%)</title><rect x="17.6338%" y="405" width="0.2508%" height="15" fill="rgb(235,201,11)" fg:x="81460395" fg:w="1158592"/><text x="17.8838%" y="415.50"></text></g><g><title>&lt;axum::extract::ws::WebSocket as futures_core::stream::Stream&gt;::poll_next (1,158,592 samples, 0.25%)</title><rect x="17.6338%" y="389" width="0.2508%" height="15" fill="rgb(207,46,11)" fg:x="81460395" fg:w="1158592"/><text x="17.8838%" y="399.50"></text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (1,158,592 samples, 0.25%)</title><rect x="17.6338%" y="373" width="0.2508%" height="15" fill="rgb(241,35,35)" fg:x="81460395" fg:w="1158592"/><text x="17.8838%" y="383.50"></text></g><g><title>&lt;tokio_tungstenite::WebSocketStream&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (1,158,592 samples, 0.25%)</title><rect x="17.6338%" y="357" width="0.2508%" height="15" fill="rgb(243,32,47)" fg:x="81460395" fg:w="1158592"/><text x="17.8838%" y="367.50"></text></g><g><title>tokio_tungstenite::WebSocketStream&lt;S&gt;::with_context (1,158,592 samples, 0.25%)</title><rect x="17.6338%" y="341" width="0.2508%" height="15" fill="rgb(247,202,23)" fg:x="81460395" fg:w="1158592"/><text x="17.8838%" y="351.50"></text></g><g><title>&lt;tokio_tungstenite::WebSocketStream&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next::_{{closure}} (1,158,592 samples, 0.25%)</title><rect x="17.6338%" y="325" width="0.2508%" height="15" fill="rgb(219,102,11)" fg:x="81460395" fg:w="1158592"/><text x="17.8838%" y="335.50"></text></g><g><title>tungstenite::protocol::WebSocket&lt;Stream&gt;::read (1,158,592 samples, 0.25%)</title><rect x="17.6338%" y="309" width="0.2508%" height="15" fill="rgb(243,110,44)" fg:x="81460395" fg:w="1158592"/><text x="17.8838%" y="319.50"></text></g><g><title>tungstenite::protocol::WebSocketContext::read (1,158,592 samples, 0.25%)</title><rect x="17.6338%" y="293" width="0.2508%" height="15" fill="rgb(222,74,54)" fg:x="81460395" fg:w="1158592"/><text x="17.8838%" y="303.50"></text></g><g><title>tungstenite::protocol::WebSocketContext::read_message_frame (1,158,592 samples, 0.25%)</title><rect x="17.6338%" y="277" width="0.2508%" height="15" fill="rgb(216,99,12)" fg:x="81460395" fg:w="1158592"/><text x="17.8838%" y="287.50"></text></g><g><title>emi_web::realtime_websocket_stream::_{{closure}} (2,820,353 samples, 0.61%)</title><rect x="17.6338%" y="485" width="0.6105%" height="15" fill="rgb(226,22,26)" fg:x="81460395" fg:w="2820353"/><text x="17.8838%" y="495.50"></text></g><g><title>axum::extract::ws::WebSocket::send::_{{closure}} (1,661,761 samples, 0.36%)</title><rect x="17.8846%" y="469" width="0.3597%" height="15" fill="rgb(217,163,10)" fg:x="82618987" fg:w="1661761"/><text x="18.1346%" y="479.50"></text></g><g><title>&lt;futures_util::sink::send::Send&lt;Si,Item&gt; as core::future::future::Future&gt;::poll (1,661,761 samples, 0.36%)</title><rect x="17.8846%" y="453" width="0.3597%" height="15" fill="rgb(213,25,53)" fg:x="82618987" fg:w="1661761"/><text x="18.1346%" y="463.50"></text></g><g><title>&lt;tokio_tungstenite::WebSocketStream&lt;T&gt; as futures_sink::Sink&lt;tungstenite::protocol::message::Message&gt;&gt;::poll_flush (1,661,761 samples, 0.36%)</title><rect x="17.8846%" y="437" width="0.3597%" height="15" fill="rgb(252,105,26)" fg:x="82618987" fg:w="1661761"/><text x="18.1346%" y="447.50"></text></g><g><title>tokio_tungstenite::WebSocketStream&lt;S&gt;::with_context (1,661,761 samples, 0.36%)</title><rect x="17.8846%" y="421" width="0.3597%" height="15" fill="rgb(220,39,43)" fg:x="82618987" fg:w="1661761"/><text x="18.1346%" y="431.50"></text></g><g><title>&lt;tokio_tungstenite::WebSocketStream&lt;T&gt; as futures_sink::Sink&lt;tungstenite::protocol::message::Message&gt;&gt;::poll_flush::_{{closure}} (1,661,761 samples, 0.36%)</title><rect x="17.8846%" y="405" width="0.3597%" height="15" fill="rgb(229,68,48)" fg:x="82618987" fg:w="1661761"/><text x="18.1346%" y="415.50"></text></g><g><title>tungstenite::protocol::WebSocket&lt;Stream&gt;::flush (1,661,761 samples, 0.36%)</title><rect x="17.8846%" y="389" width="0.3597%" height="15" fill="rgb(252,8,32)" fg:x="82618987" fg:w="1661761"/><text x="18.1346%" y="399.50"></text></g><g><title>tungstenite::protocol::WebSocketContext::flush (1,661,761 samples, 0.36%)</title><rect x="17.8846%" y="373" width="0.3597%" height="15" fill="rgb(223,20,43)" fg:x="82618987" fg:w="1661761"/><text x="18.1346%" y="383.50"></text></g><g><title>tungstenite::protocol::frame::FrameCodec::write_out_buffer (1,661,761 samples, 0.36%)</title><rect x="17.8846%" y="357" width="0.3597%" height="15" fill="rgb(229,81,49)" fg:x="82618987" fg:w="1661761"/><text x="18.1346%" y="367.50"></text></g><g><title>&lt;tokio_tungstenite::compat::AllowStd&lt;S&gt; as std::io::Write&gt;::write (1,661,761 samples, 0.36%)</title><rect x="17.8846%" y="341" width="0.3597%" height="15" fill="rgb(236,28,36)" fg:x="82618987" fg:w="1661761"/><text x="18.1346%" y="351.50"></text></g><g><title>tokio_tungstenite::compat::AllowStd&lt;S&gt;::with_context (1,661,761 samples, 0.36%)</title><rect x="17.8846%" y="325" width="0.3597%" height="15" fill="rgb(249,185,26)" fg:x="82618987" fg:w="1661761"/><text x="18.1346%" y="335.50"></text></g><g><title>&lt;tokio_tungstenite::compat::AllowStd&lt;S&gt; as std::io::Write&gt;::write::_{{closure}} (1,661,761 samples, 0.36%)</title><rect x="17.8846%" y="309" width="0.3597%" height="15" fill="rgb(249,174,33)" fg:x="82618987" fg:w="1661761"/><text x="18.1346%" y="319.50"></text></g><g><title>&lt;hyper_util::rt::tokio::TokioIo&lt;T&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_write (1,661,761 samples, 0.36%)</title><rect x="17.8846%" y="293" width="0.3597%" height="15" fill="rgb(233,201,37)" fg:x="82618987" fg:w="1661761"/><text x="18.1346%" y="303.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (1,661,761 samples, 0.36%)</title><rect x="17.8846%" y="277" width="0.3597%" height="15" fill="rgb(221,78,26)" fg:x="82618987" fg:w="1661761"/><text x="18.1346%" y="287.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_write_ready (1,661,761 samples, 0.36%)</title><rect x="17.8846%" y="261" width="0.3597%" height="15" fill="rgb(250,127,30)" fg:x="82618987" fg:w="1661761"/><text x="18.1346%" y="271.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1,661,761 samples, 0.36%)</title><rect x="17.8846%" y="245" width="0.3597%" height="15" fill="rgb(230,49,44)" fg:x="82618987" fg:w="1661761"/><text x="18.1346%" y="255.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (1,661,761 samples, 0.36%)</title><rect x="17.8846%" y="229" width="0.3597%" height="15" fill="rgb(229,67,23)" fg:x="82618987" fg:w="1661761"/><text x="18.1346%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1,661,761 samples, 0.36%)</title><rect x="17.8846%" y="213" width="0.3597%" height="15" fill="rgb(249,83,47)" fg:x="82618987" fg:w="1661761"/><text x="18.1346%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_load (1,661,761 samples, 0.36%)</title><rect x="17.8846%" y="197" width="0.3597%" height="15" fill="rgb(215,43,3)" fg:x="82618987" fg:w="1661761"/><text x="18.1346%" y="207.50"></text></g><g><title>axum::extract::ws::WebSocketUpgrade&lt;F&gt;::on_upgrade::_{{closure}} (10,750,337 samples, 2.33%)</title><rect x="17.2045%" y="517" width="2.3271%" height="15" fill="rgb(238,154,13)" fg:x="79476974" fg:w="10750337"/><text x="17.4545%" y="527.50">a..</text></g><g><title>emi_web::ui_websocket::_{{closure}}::_{{closure}}::_{{closure}} (8,766,916 samples, 1.90%)</title><rect x="17.6338%" y="501" width="1.8978%" height="15" fill="rgb(219,56,2)" fg:x="81460395" fg:w="8766916"/><text x="17.8838%" y="511.50">e..</text></g><g><title>uuid::v4::&lt;impl uuid::Uuid&gt;::new_v4 (5,946,563 samples, 1.29%)</title><rect x="18.2443%" y="485" width="1.2873%" height="15" fill="rgb(233,0,4)" fg:x="84280748" fg:w="5946563"/><text x="18.4943%" y="495.50"></text></g><g><title>uuid::rng::u128 (5,946,563 samples, 1.29%)</title><rect x="18.2443%" y="469" width="1.2873%" height="15" fill="rgb(235,30,7)" fg:x="84280748" fg:w="5946563"/><text x="18.4943%" y="479.50"></text></g><g><title>rand::random (5,946,563 samples, 1.29%)</title><rect x="18.2443%" y="453" width="1.2873%" height="15" fill="rgb(250,79,13)" fg:x="84280748" fg:w="5946563"/><text x="18.4943%" y="463.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as core::default::Default&gt;::default (5,946,563 samples, 1.29%)</title><rect x="18.2443%" y="437" width="1.2873%" height="15" fill="rgb(211,146,34)" fg:x="84280748" fg:w="5946563"/><text x="18.4943%" y="447.50"></text></g><g><title>std::sys::thread_local::native::lazy::Storage&lt;T,D&gt;::initialize (5,946,563 samples, 1.29%)</title><rect x="18.2443%" y="421" width="1.2873%" height="15" fill="rgb(228,22,38)" fg:x="84280748" fg:w="5946563"/><text x="18.4943%" y="431.50"></text></g><g><title>std::sys::sync::once::futex::Once::call (5,946,563 samples, 1.29%)</title><rect x="18.2443%" y="405" width="1.2873%" height="15" fill="rgb(235,168,5)" fg:x="84280748" fg:w="5946563"/><text x="18.4943%" y="415.50"></text></g><g><title>_ZN3std4sync4once4Once9call_once28_$u7b$$u7b$closure$u7d$$u7d$17h7c69b62dd0c7f59aE.llvm.17159779807715732780 (5,946,563 samples, 1.29%)</title><rect x="18.2443%" y="389" width="1.2873%" height="15" fill="rgb(221,155,16)" fg:x="84280748" fg:w="5946563"/><text x="18.4943%" y="399.50"></text></g><g><title>__register_atfork (5,946,563 samples, 1.29%)</title><rect x="18.2443%" y="373" width="1.2873%" height="15" fill="rgb(215,215,53)" fg:x="84280748" fg:w="5946563"/><text x="18.4943%" y="383.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (1,661,761 samples, 0.36%)</title><rect x="19.5316%" y="501" width="0.3597%" height="15" fill="rgb(223,4,10)" fg:x="90227311" fg:w="1661761"/><text x="19.7816%" y="511.50"></text></g><g><title>tokio::time::sleep::Sleep::poll_elapsed (1,661,761 samples, 0.36%)</title><rect x="19.5316%" y="485" width="0.3597%" height="15" fill="rgb(234,103,6)" fg:x="90227311" fg:w="1661761"/><text x="19.7816%" y="495.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::poll_elapsed (1,661,761 samples, 0.36%)</title><rect x="19.5316%" y="469" width="0.3597%" height="15" fill="rgb(227,97,0)" fg:x="90227311" fg:w="1661761"/><text x="19.7816%" y="479.50"></text></g><g><title>tokio::runtime::time::entry::StateCell::poll (1,661,761 samples, 0.36%)</title><rect x="19.5316%" y="453" width="0.3597%" height="15" fill="rgb(234,150,53)" fg:x="90227311" fg:w="1661761"/><text x="19.7816%" y="463.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (1,661,761 samples, 0.36%)</title><rect x="19.5316%" y="437" width="0.3597%" height="15" fill="rgb(228,201,54)" fg:x="90227311" fg:w="1661761"/><text x="19.7816%" y="447.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register (1,661,761 samples, 0.36%)</title><rect x="19.5316%" y="421" width="0.3597%" height="15" fill="rgb(222,22,37)" fg:x="90227311" fg:w="1661761"/><text x="19.7816%" y="431.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register::catch_unwind (1,661,761 samples, 0.36%)</title><rect x="19.5316%" y="405" width="0.3597%" height="15" fill="rgb(237,53,32)" fg:x="90227311" fg:w="1661761"/><text x="19.7816%" y="415.50"></text></g><g><title>std::panic::catch_unwind (1,661,761 samples, 0.36%)</title><rect x="19.5316%" y="389" width="0.3597%" height="15" fill="rgb(233,25,53)" fg:x="90227311" fg:w="1661761"/><text x="19.7816%" y="399.50"></text></g><g><title>std::panicking::try (1,661,761 samples, 0.36%)</title><rect x="19.5316%" y="373" width="0.3597%" height="15" fill="rgb(210,40,34)" fg:x="90227311" fg:w="1661761"/><text x="19.7816%" y="383.50"></text></g><g><title>std::panicking::try::do_call (1,661,761 samples, 0.36%)</title><rect x="19.5316%" y="357" width="0.3597%" height="15" fill="rgb(241,220,44)" fg:x="90227311" fg:w="1661761"/><text x="19.7816%" y="367.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,661,761 samples, 0.36%)</title><rect x="19.5316%" y="341" width="0.3597%" height="15" fill="rgb(235,28,35)" fg:x="90227311" fg:w="1661761"/><text x="19.7816%" y="351.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register::_{{closure}} (1,661,761 samples, 0.36%)</title><rect x="19.5316%" y="325" width="0.3597%" height="15" fill="rgb(210,56,17)" fg:x="90227311" fg:w="1661761"/><text x="19.7816%" y="335.50"></text></g><g><title>&lt;&amp;core::task::wake::Waker as tokio::sync::task::atomic_waker::WakerRef&gt;::into_waker (1,661,761 samples, 0.36%)</title><rect x="19.5316%" y="309" width="0.3597%" height="15" fill="rgb(224,130,29)" fg:x="90227311" fg:w="1661761"/><text x="19.7816%" y="319.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (1,661,761 samples, 0.36%)</title><rect x="19.5316%" y="293" width="0.3597%" height="15" fill="rgb(235,212,8)" fg:x="90227311" fg:w="1661761"/><text x="19.7816%" y="303.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1,661,761 samples, 0.36%)</title><rect x="19.5316%" y="277" width="0.3597%" height="15" fill="rgb(223,33,50)" fg:x="90227311" fg:w="1661761"/><text x="19.7816%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::mutex::MutexGuard&lt;std::collections::hash::map::HashMap&lt;uuid::Uuid,tokio::sync::mpsc::bounded::Sender&lt;alloc::string::String&gt;&gt;&gt;&gt; (1,495,347 samples, 0.32%)</title><rect x="19.8913%" y="501" width="0.3237%" height="15" fill="rgb(219,149,13)" fg:x="91889072" fg:w="1495347"/><text x="20.1413%" y="511.50"></text></g><g><title>&lt;tokio::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1,495,347 samples, 0.32%)</title><rect x="19.8913%" y="485" width="0.3237%" height="15" fill="rgb(250,156,29)" fg:x="91889072" fg:w="1495347"/><text x="20.1413%" y="495.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::release (1,495,347 samples, 0.32%)</title><rect x="19.8913%" y="469" width="0.3237%" height="15" fill="rgb(216,193,19)" fg:x="91889072" fg:w="1495347"/><text x="20.1413%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;emi_web::parse_frame::Buffer&gt; (1,590,324 samples, 0.34%)</title><rect x="20.2150%" y="485" width="0.3443%" height="15" fill="rgb(216,135,14)" fg:x="93384419" fg:w="1590324"/><text x="20.4650%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (1,590,324 samples, 0.34%)</title><rect x="20.2150%" y="469" width="0.3443%" height="15" fill="rgb(241,47,5)" fg:x="93384419" fg:w="1590324"/><text x="20.4650%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,590,324 samples, 0.34%)</title><rect x="20.2150%" y="453" width="0.3443%" height="15" fill="rgb(233,42,35)" fg:x="93384419" fg:w="1590324"/><text x="20.4650%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (1,590,324 samples, 0.34%)</title><rect x="20.2150%" y="437" width="0.3443%" height="15" fill="rgb(231,13,6)" fg:x="93384419" fg:w="1590324"/><text x="20.4650%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1,590,324 samples, 0.34%)</title><rect x="20.2150%" y="421" width="0.3443%" height="15" fill="rgb(207,181,40)" fg:x="93384419" fg:w="1590324"/><text x="20.4650%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,590,324 samples, 0.34%)</title><rect x="20.2150%" y="405" width="0.3443%" height="15" fill="rgb(254,173,49)" fg:x="93384419" fg:w="1590324"/><text x="20.4650%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,590,324 samples, 0.34%)</title><rect x="20.2150%" y="389" width="0.3443%" height="15" fill="rgb(221,1,38)" fg:x="93384419" fg:w="1590324"/><text x="20.4650%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,590,324 samples, 0.34%)</title><rect x="20.2150%" y="373" width="0.3443%" height="15" fill="rgb(206,124,46)" fg:x="93384419" fg:w="1590324"/><text x="20.4650%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,590,324 samples, 0.34%)</title><rect x="20.2150%" y="357" width="0.3443%" height="15" fill="rgb(249,21,11)" fg:x="93384419" fg:w="1590324"/><text x="20.4650%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,590,324 samples, 0.34%)</title><rect x="20.2150%" y="341" width="0.3443%" height="15" fill="rgb(222,201,40)" fg:x="93384419" fg:w="1590324"/><text x="20.4650%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (1,590,324 samples, 0.34%)</title><rect x="20.2150%" y="325" width="0.3443%" height="15" fill="rgb(235,61,29)" fg:x="93384419" fg:w="1590324"/><text x="20.4650%" y="335.50"></text></g><g><title>cfree (1,590,324 samples, 0.34%)</title><rect x="20.2150%" y="309" width="0.3443%" height="15" fill="rgb(219,207,3)" fg:x="93384419" fg:w="1590324"/><text x="20.4650%" y="319.50"></text></g><g><title>[libc.so.6] (1,590,324 samples, 0.34%)</title><rect x="20.2150%" y="293" width="0.3443%" height="15" fill="rgb(222,56,46)" fg:x="93384419" fg:w="1590324"/><text x="20.4650%" y="303.50"></text></g><g><title>[libc.so.6] (1,590,324 samples, 0.34%)</title><rect x="20.2150%" y="277" width="0.3443%" height="15" fill="rgb(239,76,54)" fg:x="93384419" fg:w="1590324"/><text x="20.4650%" y="287.50"></text></g><g><title>[libc.so.6] (1,590,324 samples, 0.34%)</title><rect x="20.2150%" y="261" width="0.3443%" height="15" fill="rgb(231,124,27)" fg:x="93384419" fg:w="1590324"/><text x="20.4650%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,155,571 samples, 0.68%)</title><rect x="20.5593%" y="373" width="0.6831%" height="15" fill="rgb(249,195,6)" fg:x="94974743" fg:w="3155571"/><text x="20.8093%" y="383.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,704,375 samples, 0.37%)</title><rect x="20.8734%" y="357" width="0.3689%" height="15" fill="rgb(237,174,47)" fg:x="96425939" fg:w="1704375"/><text x="21.1234%" y="367.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (1,704,375 samples, 0.37%)</title><rect x="20.8734%" y="341" width="0.3689%" height="15" fill="rgb(206,201,31)" fg:x="96425939" fg:w="1704375"/><text x="21.1234%" y="351.50"></text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (1,704,375 samples, 0.37%)</title><rect x="20.8734%" y="325" width="0.3689%" height="15" fill="rgb(231,57,52)" fg:x="96425939" fg:w="1704375"/><text x="21.1234%" y="335.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::next (1,704,375 samples, 0.37%)</title><rect x="20.8734%" y="309" width="0.3689%" height="15" fill="rgb(248,177,22)" fg:x="96425939" fg:w="1704375"/><text x="21.1234%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3,462,926 samples, 0.75%)</title><rect x="21.2424%" y="373" width="0.7496%" height="15" fill="rgb(215,211,37)" fg:x="98130314" fg:w="3462926"/><text x="21.4924%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3,462,926 samples, 0.75%)</title><rect x="21.2424%" y="357" width="0.7496%" height="15" fill="rgb(241,128,51)" fg:x="98130314" fg:w="3462926"/><text x="21.4924%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (3,462,926 samples, 0.75%)</title><rect x="21.2424%" y="341" width="0.7496%" height="15" fill="rgb(227,165,31)" fg:x="98130314" fg:w="3462926"/><text x="21.4924%" y="351.50"></text></g><g><title>&lt;alloc::string::String as alloc::string::ToString&gt;::to_string (1,983,421 samples, 0.43%)</title><rect x="21.9920%" y="341" width="0.4294%" height="15" fill="rgb(228,167,24)" fg:x="101593240" fg:w="1983421"/><text x="22.2420%" y="351.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (1,983,421 samples, 0.43%)</title><rect x="21.9920%" y="325" width="0.4294%" height="15" fill="rgb(228,143,12)" fg:x="101593240" fg:w="1983421"/><text x="22.2420%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,983,421 samples, 0.43%)</title><rect x="21.9920%" y="309" width="0.4294%" height="15" fill="rgb(249,149,8)" fg:x="101593240" fg:w="1983421"/><text x="22.2420%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,983,421 samples, 0.43%)</title><rect x="21.9920%" y="293" width="0.4294%" height="15" fill="rgb(243,35,44)" fg:x="101593240" fg:w="1983421"/><text x="22.2420%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,983,421 samples, 0.43%)</title><rect x="21.9920%" y="277" width="0.4294%" height="15" fill="rgb(246,89,9)" fg:x="101593240" fg:w="1983421"/><text x="22.2420%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1,983,421 samples, 0.43%)</title><rect x="21.9920%" y="261" width="0.4294%" height="15" fill="rgb(233,213,13)" fg:x="101593240" fg:w="1983421"/><text x="22.2420%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,983,421 samples, 0.43%)</title><rect x="21.9920%" y="245" width="0.4294%" height="15" fill="rgb(233,141,41)" fg:x="101593240" fg:w="1983421"/><text x="22.2420%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1,983,421 samples, 0.43%)</title><rect x="21.9920%" y="229" width="0.4294%" height="15" fill="rgb(239,167,4)" fg:x="101593240" fg:w="1983421"/><text x="22.2420%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,983,421 samples, 0.43%)</title><rect x="21.9920%" y="213" width="0.4294%" height="15" fill="rgb(209,217,16)" fg:x="101593240" fg:w="1983421"/><text x="22.2420%" y="223.50"></text></g><g><title>[libc.so.6] (1,983,421 samples, 0.43%)</title><rect x="21.9920%" y="197" width="0.4294%" height="15" fill="rgb(219,88,35)" fg:x="101593240" fg:w="1983421"/><text x="22.2420%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (9,013,427 samples, 1.95%)</title><rect x="20.5593%" y="469" width="1.9511%" height="15" fill="rgb(220,193,23)" fg:x="94974743" fg:w="9013427"/><text x="20.8093%" y="479.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (9,013,427 samples, 1.95%)</title><rect x="20.5593%" y="453" width="1.9511%" height="15" fill="rgb(230,90,52)" fg:x="94974743" fg:w="9013427"/><text x="20.8093%" y="463.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9,013,427 samples, 1.95%)</title><rect x="20.5593%" y="437" width="1.9511%" height="15" fill="rgb(252,106,19)" fg:x="94974743" fg:w="9013427"/><text x="20.8093%" y="447.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (9,013,427 samples, 1.95%)</title><rect x="20.5593%" y="421" width="1.9511%" height="15" fill="rgb(206,74,20)" fg:x="94974743" fg:w="9013427"/><text x="20.8093%" y="431.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (9,013,427 samples, 1.95%)</title><rect x="20.5593%" y="405" width="1.9511%" height="15" fill="rgb(230,138,44)" fg:x="94974743" fg:w="9013427"/><text x="20.8093%" y="415.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (9,013,427 samples, 1.95%)</title><rect x="20.5593%" y="389" width="1.9511%" height="15" fill="rgb(235,182,43)" fg:x="94974743" fg:w="9013427"/><text x="20.8093%" y="399.50">a..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2,394,930 samples, 0.52%)</title><rect x="21.9920%" y="373" width="0.5184%" height="15" fill="rgb(242,16,51)" fg:x="101593240" fg:w="2394930"/><text x="22.2420%" y="383.50"></text></g><g><title>emi_web::parse_frame::Buffer::from_string::_{{closure}} (2,394,930 samples, 0.52%)</title><rect x="21.9920%" y="357" width="0.5184%" height="15" fill="rgb(248,9,4)" fg:x="101593240" fg:w="2394930"/><text x="22.2420%" y="367.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::replace (411,509 samples, 0.09%)</title><rect x="22.4213%" y="341" width="0.0891%" height="15" fill="rgb(210,31,22)" fg:x="103576661" fg:w="411509"/><text x="22.6713%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::match_indices (411,509 samples, 0.09%)</title><rect x="22.4213%" y="325" width="0.0891%" height="15" fill="rgb(239,54,39)" fg:x="103576661" fg:w="411509"/><text x="22.6713%" y="335.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::into_searcher (411,509 samples, 0.09%)</title><rect x="22.4213%" y="309" width="0.0891%" height="15" fill="rgb(230,99,41)" fg:x="103576661" fg:w="411509"/><text x="22.6713%" y="319.50"></text></g><g><title>core::str::pattern::StrSearcher::new (411,509 samples, 0.09%)</title><rect x="22.4213%" y="293" width="0.0891%" height="15" fill="rgb(253,106,12)" fg:x="103576661" fg:w="411509"/><text x="22.6713%" y="303.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (2,263,263 samples, 0.49%)</title><rect x="22.5104%" y="453" width="0.4899%" height="15" fill="rgb(213,46,41)" fg:x="103988170" fg:w="2263263"/><text x="22.7604%" y="463.50"></text></g><g><title>core::num::&lt;impl i32&gt;::from_str_radix (2,263,263 samples, 0.49%)</title><rect x="22.5104%" y="437" width="0.4899%" height="15" fill="rgb(215,133,35)" fg:x="103988170" fg:w="2263263"/><text x="22.7604%" y="447.50"></text></g><g><title>regex::regex::string::Regex::static_captures_len (4,176,750 samples, 0.90%)</title><rect x="23.0004%" y="421" width="0.9041%" height="15" fill="rgb(213,28,5)" fg:x="106251433" fg:w="4176750"/><text x="23.2504%" y="431.50"></text></g><g><title>regex_automata::meta::regex::Regex::static_captures_len (4,176,750 samples, 0.90%)</title><rect x="23.0004%" y="405" width="0.9041%" height="15" fill="rgb(215,77,49)" fg:x="106251433" fg:w="4176750"/><text x="23.2504%" y="415.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::props_union (4,176,750 samples, 0.90%)</title><rect x="23.0004%" y="389" width="0.9041%" height="15" fill="rgb(248,100,22)" fg:x="106251433" fg:w="4176750"/><text x="23.2504%" y="399.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (4,176,750 samples, 0.90%)</title><rect x="23.0004%" y="373" width="0.9041%" height="15" fill="rgb(208,67,9)" fg:x="106251433" fg:w="4176750"/><text x="23.2504%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (4,176,750 samples, 0.90%)</title><rect x="23.0004%" y="357" width="0.9041%" height="15" fill="rgb(219,133,21)" fg:x="106251433" fg:w="4176750"/><text x="23.2504%" y="367.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (4,176,750 samples, 0.90%)</title><rect x="23.0004%" y="341" width="0.9041%" height="15" fill="rgb(246,46,29)" fg:x="106251433" fg:w="4176750"/><text x="23.2504%" y="351.50"></text></g><g><title>regex_automata::meta::strategy::Core::search_slots_nofail (1,704,375 samples, 0.37%)</title><rect x="23.9045%" y="373" width="0.3689%" height="15" fill="rgb(246,185,52)" fg:x="110428183" fg:w="1704375"/><text x="24.1545%" y="383.50"></text></g><g><title>regex_automata::meta::wrappers::OnePassEngine::search_slots (1,704,375 samples, 0.37%)</title><rect x="23.9045%" y="357" width="0.3689%" height="15" fill="rgb(252,136,11)" fg:x="110428183" fg:w="1704375"/><text x="24.1545%" y="367.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots_imp (1,704,375 samples, 0.37%)</title><rect x="23.9045%" y="341" width="0.3689%" height="15" fill="rgb(219,138,53)" fg:x="110428183" fg:w="1704375"/><text x="24.1545%" y="351.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::search_imp (1,704,375 samples, 0.37%)</title><rect x="23.9045%" y="325" width="0.3689%" height="15" fill="rgb(211,51,23)" fg:x="110428183" fg:w="1704375"/><text x="24.1545%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::transition (1,704,375 samples, 0.37%)</title><rect x="23.9045%" y="309" width="0.3689%" height="15" fill="rgb(247,221,28)" fg:x="110428183" fg:w="1704375"/><text x="24.1545%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::DFA::try_search_fwd (2,912,044 samples, 0.63%)</title><rect x="24.2734%" y="325" width="0.6304%" height="15" fill="rgb(251,222,45)" fg:x="112132558" fg:w="2912044"/><text x="24.5234%" y="335.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2,912,044 samples, 0.63%)</title><rect x="24.2734%" y="309" width="0.6304%" height="15" fill="rgb(217,162,53)" fg:x="112132558" fg:w="2912044"/><text x="24.5234%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd_imp (2,912,044 samples, 0.63%)</title><rect x="24.2734%" y="293" width="0.6304%" height="15" fill="rgb(229,93,14)" fg:x="112132558" fg:w="2912044"/><text x="24.5234%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::DFA::next_state (2,912,044 samples, 0.63%)</title><rect x="24.2734%" y="277" width="0.6304%" height="15" fill="rgb(209,67,49)" fg:x="112132558" fg:w="2912044"/><text x="24.5234%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1,492,949 samples, 0.32%)</title><rect x="24.5806%" y="261" width="0.3232%" height="15" fill="rgb(213,87,29)" fg:x="113551653" fg:w="1492949"/><text x="24.8306%" y="271.50"></text></g><g><title>regex_automata::util::determinize::next (1,492,949 samples, 0.32%)</title><rect x="24.5806%" y="245" width="0.3232%" height="15" fill="rgb(205,151,52)" fg:x="113551653" fg:w="1492949"/><text x="24.8306%" y="255.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1,492,949 samples, 0.32%)</title><rect x="24.5806%" y="229" width="0.3232%" height="15" fill="rgb(253,215,39)" fg:x="113551653" fg:w="1492949"/><text x="24.8306%" y="239.50"></text></g><g><title>emi_web::parse_frame::Buffer::parse_area (12,658,063 samples, 2.74%)</title><rect x="22.5104%" y="469" width="2.7401%" height="15" fill="rgb(221,220,41)" fg:x="103988170" fg:w="12658063"/><text x="22.7604%" y="479.50">em..</text></g><g><title>regex::regex::string::Regex::captures (10,394,800 samples, 2.25%)</title><rect x="23.0004%" y="453" width="2.2502%" height="15" fill="rgb(218,133,21)" fg:x="106251433" fg:w="10394800"/><text x="23.2504%" y="463.50">r..</text></g><g><title>regex::regex::string::Regex::captures_at (10,394,800 samples, 2.25%)</title><rect x="23.0004%" y="437" width="2.2502%" height="15" fill="rgb(221,193,43)" fg:x="106251433" fg:w="10394800"/><text x="23.2504%" y="447.50">r..</text></g><g><title>regex_automata::meta::regex::Regex::search_captures (6,218,050 samples, 1.35%)</title><rect x="23.9045%" y="421" width="1.3460%" height="15" fill="rgb(240,128,52)" fg:x="110428183" fg:w="6218050"/><text x="24.1545%" y="431.50"></text></g><g><title>regex_automata::meta::regex::Regex::search_slots (6,218,050 samples, 1.35%)</title><rect x="23.9045%" y="405" width="1.3460%" height="15" fill="rgb(253,114,12)" fg:x="110428183" fg:w="6218050"/><text x="24.1545%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_slots (6,218,050 samples, 1.35%)</title><rect x="23.9045%" y="389" width="1.3460%" height="15" fill="rgb(215,223,47)" fg:x="110428183" fg:w="6218050"/><text x="24.1545%" y="399.50"></text></g><g><title>regex_automata::meta::strategy::Core::try_search_mayfail (4,513,675 samples, 0.98%)</title><rect x="24.2734%" y="373" width="0.9771%" height="15" fill="rgb(248,225,23)" fg:x="112132558" fg:w="4513675"/><text x="24.5234%" y="383.50"></text></g><g><title>regex_automata::meta::wrappers::HybridEngine::try_search (4,513,675 samples, 0.98%)</title><rect x="24.2734%" y="357" width="0.9771%" height="15" fill="rgb(250,108,0)" fg:x="112132558" fg:w="4513675"/><text x="24.5234%" y="367.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (4,513,675 samples, 0.98%)</title><rect x="24.2734%" y="341" width="0.9771%" height="15" fill="rgb(228,208,7)" fg:x="112132558" fg:w="4513675"/><text x="24.5234%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::DFA::try_search_rev (1,601,631 samples, 0.35%)</title><rect x="24.9038%" y="325" width="0.3467%" height="15" fill="rgb(244,45,10)" fg:x="115044602" fg:w="1601631"/><text x="25.1538%" y="335.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (1,601,631 samples, 0.35%)</title><rect x="24.9038%" y="309" width="0.3467%" height="15" fill="rgb(207,125,25)" fg:x="115044602" fg:w="1601631"/><text x="25.1538%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_rev_imp (1,601,631 samples, 0.35%)</title><rect x="24.9038%" y="293" width="0.3467%" height="15" fill="rgb(210,195,18)" fg:x="115044602" fg:w="1601631"/><text x="25.1538%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::DFA::next_state_untagged_unchecked (1,601,631 samples, 0.35%)</title><rect x="24.9038%" y="277" width="0.3467%" height="15" fill="rgb(249,80,12)" fg:x="115044602" fg:w="1601631"/><text x="25.1538%" y="287.50"></text></g><g><title>&lt;regex::regex::string::CaptureMatches as core::iter::traits::iterator::Iterator&gt;::next (1,736,120 samples, 0.38%)</title><rect x="25.2505%" y="341" width="0.3758%" height="15" fill="rgb(221,65,9)" fg:x="116646233" fg:w="1736120"/><text x="25.5005%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::regex::CapturesMatches as core::iter::traits::iterator::Iterator&gt;::next (1,736,120 samples, 0.38%)</title><rect x="25.2505%" y="325" width="0.3758%" height="15" fill="rgb(235,49,36)" fg:x="116646233" fg:w="1736120"/><text x="25.5005%" y="335.50"></text></g><g><title>regex_automata::util::iter::Searcher::advance (1,736,120 samples, 0.38%)</title><rect x="25.2505%" y="309" width="0.3758%" height="15" fill="rgb(225,32,20)" fg:x="116646233" fg:w="1736120"/><text x="25.5005%" y="319.50"></text></g><g><title>regex_automata::util::iter::Searcher::try_advance (1,736,120 samples, 0.38%)</title><rect x="25.2505%" y="293" width="0.3758%" height="15" fill="rgb(215,141,46)" fg:x="116646233" fg:w="1736120"/><text x="25.5005%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::regex::CapturesMatches as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (1,736,120 samples, 0.38%)</title><rect x="25.2505%" y="277" width="0.3758%" height="15" fill="rgb(250,160,47)" fg:x="116646233" fg:w="1736120"/><text x="25.5005%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Regex::search_captures_with (1,736,120 samples, 0.38%)</title><rect x="25.2505%" y="261" width="0.3758%" height="15" fill="rgb(216,222,40)" fg:x="116646233" fg:w="1736120"/><text x="25.5005%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Regex::search_slots_with (1,736,120 samples, 0.38%)</title><rect x="25.2505%" y="245" width="0.3758%" height="15" fill="rgb(234,217,39)" fg:x="116646233" fg:w="1736120"/><text x="25.5005%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_slots (1,736,120 samples, 0.38%)</title><rect x="25.2505%" y="229" width="0.3758%" height="15" fill="rgb(207,178,40)" fg:x="116646233" fg:w="1736120"/><text x="25.5005%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::Core::search_slots_nofail (1,736,120 samples, 0.38%)</title><rect x="25.2505%" y="213" width="0.3758%" height="15" fill="rgb(221,136,13)" fg:x="116646233" fg:w="1736120"/><text x="25.5005%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::OnePassEngine::search_slots (1,736,120 samples, 0.38%)</title><rect x="25.2505%" y="197" width="0.3758%" height="15" fill="rgb(249,199,10)" fg:x="116646233" fg:w="1736120"/><text x="25.5005%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::try_search_slots_imp (1,736,120 samples, 0.38%)</title><rect x="25.2505%" y="181" width="0.3758%" height="15" fill="rgb(249,222,13)" fg:x="116646233" fg:w="1736120"/><text x="25.5005%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::DFA::search_imp (1,736,120 samples, 0.38%)</title><rect x="25.2505%" y="165" width="0.3758%" height="15" fill="rgb(244,185,38)" fg:x="116646233" fg:w="1736120"/><text x="25.5005%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3,139,412 samples, 0.68%)</title><rect x="25.2505%" y="453" width="0.6796%" height="15" fill="rgb(236,202,9)" fg:x="116646233" fg:w="3139412"/><text x="25.5005%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3,139,412 samples, 0.68%)</title><rect x="25.2505%" y="437" width="0.6796%" height="15" fill="rgb(250,229,37)" fg:x="116646233" fg:w="3139412"/><text x="25.5005%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,139,412 samples, 0.68%)</title><rect x="25.2505%" y="421" width="0.6796%" height="15" fill="rgb(206,174,23)" fg:x="116646233" fg:w="3139412"/><text x="25.5005%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3,139,412 samples, 0.68%)</title><rect x="25.2505%" y="405" width="0.6796%" height="15" fill="rgb(211,33,43)" fg:x="116646233" fg:w="3139412"/><text x="25.5005%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3,139,412 samples, 0.68%)</title><rect x="25.2505%" y="389" width="0.6796%" height="15" fill="rgb(245,58,50)" fg:x="116646233" fg:w="3139412"/><text x="25.5005%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (3,139,412 samples, 0.68%)</title><rect x="25.2505%" y="373" width="0.6796%" height="15" fill="rgb(244,68,36)" fg:x="116646233" fg:w="3139412"/><text x="25.5005%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,139,412 samples, 0.68%)</title><rect x="25.2505%" y="357" width="0.6796%" height="15" fill="rgb(232,229,15)" fg:x="116646233" fg:w="3139412"/><text x="25.5005%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,403,292 samples, 0.30%)</title><rect x="25.6263%" y="341" width="0.3038%" height="15" fill="rgb(254,30,23)" fg:x="118382353" fg:w="1403292"/><text x="25.8763%" y="351.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,403,292 samples, 0.30%)</title><rect x="25.6263%" y="325" width="0.3038%" height="15" fill="rgb(235,160,14)" fg:x="118382353" fg:w="1403292"/><text x="25.8763%" y="335.50"></text></g><g><title>emi_web::parse_frame::Buffer::parse_styles::_{{closure}} (1,403,292 samples, 0.30%)</title><rect x="25.6263%" y="309" width="0.3038%" height="15" fill="rgb(212,155,44)" fg:x="118382353" fg:w="1403292"/><text x="25.8763%" y="319.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (1,403,292 samples, 0.30%)</title><rect x="25.6263%" y="293" width="0.3038%" height="15" fill="rgb(226,2,50)" fg:x="118382353" fg:w="1403292"/><text x="25.8763%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (1,403,292 samples, 0.30%)</title><rect x="25.6263%" y="277" width="0.3038%" height="15" fill="rgb(234,177,6)" fg:x="118382353" fg:w="1403292"/><text x="25.8763%" y="287.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1,403,292 samples, 0.30%)</title><rect x="25.6263%" y="261" width="0.3038%" height="15" fill="rgb(217,24,9)" fg:x="118382353" fg:w="1403292"/><text x="25.8763%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1,403,292 samples, 0.30%)</title><rect x="25.6263%" y="245" width="0.3038%" height="15" fill="rgb(220,13,46)" fg:x="118382353" fg:w="1403292"/><text x="25.8763%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1,403,292 samples, 0.30%)</title><rect x="25.6263%" y="229" width="0.3038%" height="15" fill="rgb(239,221,27)" fg:x="118382353" fg:w="1403292"/><text x="25.8763%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,403,292 samples, 0.30%)</title><rect x="25.6263%" y="213" width="0.3038%" height="15" fill="rgb(222,198,25)" fg:x="118382353" fg:w="1403292"/><text x="25.8763%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1,403,292 samples, 0.30%)</title><rect x="25.6263%" y="197" width="0.3038%" height="15" fill="rgb(211,99,13)" fg:x="118382353" fg:w="1403292"/><text x="25.8763%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,403,292 samples, 0.30%)</title><rect x="25.6263%" y="181" width="0.3038%" height="15" fill="rgb(232,111,31)" fg:x="118382353" fg:w="1403292"/><text x="25.8763%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,403,292 samples, 0.30%)</title><rect x="25.6263%" y="165" width="0.3038%" height="15" fill="rgb(245,82,37)" fg:x="118382353" fg:w="1403292"/><text x="25.8763%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,403,292 samples, 0.30%)</title><rect x="25.6263%" y="149" width="0.3038%" height="15" fill="rgb(227,149,46)" fg:x="118382353" fg:w="1403292"/><text x="25.8763%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,403,292 samples, 0.30%)</title><rect x="25.6263%" y="133" width="0.3038%" height="15" fill="rgb(218,36,50)" fg:x="118382353" fg:w="1403292"/><text x="25.8763%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,403,292 samples, 0.30%)</title><rect x="25.6263%" y="117" width="0.3038%" height="15" fill="rgb(226,80,48)" fg:x="118382353" fg:w="1403292"/><text x="25.8763%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,403,292 samples, 0.30%)</title><rect x="25.6263%" y="101" width="0.3038%" height="15" fill="rgb(238,224,15)" fg:x="118382353" fg:w="1403292"/><text x="25.8763%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,403,292 samples, 0.30%)</title><rect x="25.6263%" y="85" width="0.3038%" height="15" fill="rgb(241,136,10)" fg:x="118382353" fg:w="1403292"/><text x="25.8763%" y="95.50"></text></g><g><title>alloc::alloc::alloc (1,403,292 samples, 0.30%)</title><rect x="25.6263%" y="69" width="0.3038%" height="15" fill="rgb(208,32,45)" fg:x="118382353" fg:w="1403292"/><text x="25.8763%" y="79.50"></text></g><g><title>malloc (1,403,292 samples, 0.30%)</title><rect x="25.6263%" y="53" width="0.3038%" height="15" fill="rgb(207,135,9)" fg:x="118382353" fg:w="1403292"/><text x="25.8763%" y="63.50"></text></g><g><title>[libc.so.6] (1,403,292 samples, 0.30%)</title><rect x="25.6263%" y="37" width="0.3038%" height="15" fill="rgb(206,86,44)" fg:x="118382353" fg:w="1403292"/><text x="25.8763%" y="47.50"></text></g><g><title>emi_web::parse_frame::Buffer::parse_styles (4,491,090 samples, 0.97%)</title><rect x="25.2505%" y="469" width="0.9722%" height="15" fill="rgb(245,177,15)" fg:x="116646233" fg:w="4491090"/><text x="25.5005%" y="479.50"></text></g><g><title>regex::regex::string::Regex::captures_iter (1,351,678 samples, 0.29%)</title><rect x="25.9301%" y="453" width="0.2926%" height="15" fill="rgb(206,64,50)" fg:x="119785645" fg:w="1351678"/><text x="26.1801%" y="463.50"></text></g><g><title>regex_automata::meta::regex::Regex::captures_iter (1,351,678 samples, 0.29%)</title><rect x="25.9301%" y="437" width="0.2926%" height="15" fill="rgb(234,36,40)" fg:x="119785645" fg:w="1351678"/><text x="26.1801%" y="447.50"></text></g><g><title>regex_automata::meta::regex::Regex::create_captures (1,351,678 samples, 0.29%)</title><rect x="25.9301%" y="421" width="0.2926%" height="15" fill="rgb(213,64,8)" fg:x="119785645" fg:w="1351678"/><text x="26.1801%" y="431.50"></text></g><g><title>regex_automata::util::captures::Captures::all (1,351,678 samples, 0.29%)</title><rect x="25.9301%" y="405" width="0.2926%" height="15" fill="rgb(210,75,36)" fg:x="119785645" fg:w="1351678"/><text x="26.1801%" y="415.50"></text></g><g><title>alloc::vec::from_elem (1,351,678 samples, 0.29%)</title><rect x="25.9301%" y="389" width="0.2926%" height="15" fill="rgb(229,88,21)" fg:x="119785645" fg:w="1351678"/><text x="26.1801%" y="399.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1,351,678 samples, 0.29%)</title><rect x="25.9301%" y="373" width="0.2926%" height="15" fill="rgb(252,204,47)" fg:x="119785645" fg:w="1351678"/><text x="26.1801%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,351,678 samples, 0.29%)</title><rect x="25.9301%" y="357" width="0.2926%" height="15" fill="rgb(208,77,27)" fg:x="119785645" fg:w="1351678"/><text x="26.1801%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,351,678 samples, 0.29%)</title><rect x="25.9301%" y="341" width="0.2926%" height="15" fill="rgb(221,76,26)" fg:x="119785645" fg:w="1351678"/><text x="26.1801%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,351,678 samples, 0.29%)</title><rect x="25.9301%" y="325" width="0.2926%" height="15" fill="rgb(225,139,18)" fg:x="119785645" fg:w="1351678"/><text x="26.1801%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,351,678 samples, 0.29%)</title><rect x="25.9301%" y="309" width="0.2926%" height="15" fill="rgb(230,137,11)" fg:x="119785645" fg:w="1351678"/><text x="26.1801%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,351,678 samples, 0.29%)</title><rect x="25.9301%" y="293" width="0.2926%" height="15" fill="rgb(212,28,1)" fg:x="119785645" fg:w="1351678"/><text x="26.1801%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,351,678 samples, 0.29%)</title><rect x="25.9301%" y="277" width="0.2926%" height="15" fill="rgb(248,164,17)" fg:x="119785645" fg:w="1351678"/><text x="26.1801%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1,351,678 samples, 0.29%)</title><rect x="25.9301%" y="261" width="0.2926%" height="15" fill="rgb(222,171,42)" fg:x="119785645" fg:w="1351678"/><text x="26.1801%" y="271.50"></text></g><g><title>malloc (1,351,678 samples, 0.29%)</title><rect x="25.9301%" y="245" width="0.2926%" height="15" fill="rgb(243,84,45)" fg:x="119785645" fg:w="1351678"/><text x="26.1801%" y="255.50"></text></g><g><title>regex_automata::meta::regex::Regex::create_captures (1,609,620 samples, 0.35%)</title><rect x="26.2227%" y="437" width="0.3484%" height="15" fill="rgb(252,49,23)" fg:x="121137323" fg:w="1609620"/><text x="26.4727%" y="447.50"></text></g><g><title>&lt;regex_automata::util::captures::GroupInfo as core::clone::Clone&gt;::clone (1,609,620 samples, 0.35%)</title><rect x="26.2227%" y="421" width="0.3484%" height="15" fill="rgb(215,19,7)" fg:x="121137323" fg:w="1609620"/><text x="26.4727%" y="431.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,609,620 samples, 0.35%)</title><rect x="26.2227%" y="405" width="0.3484%" height="15" fill="rgb(238,81,41)" fg:x="121137323" fg:w="1609620"/><text x="26.4727%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1,609,620 samples, 0.35%)</title><rect x="26.2227%" y="389" width="0.3484%" height="15" fill="rgb(210,199,37)" fg:x="121137323" fg:w="1609620"/><text x="26.4727%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_add (1,609,620 samples, 0.35%)</title><rect x="26.2227%" y="373" width="0.3484%" height="15" fill="rgb(244,192,49)" fg:x="121137323" fg:w="1609620"/><text x="26.4727%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (13,365,713 samples, 2.89%)</title><rect x="26.5712%" y="293" width="2.8933%" height="15" fill="rgb(226,211,11)" fg:x="122746943" fg:w="13365713"/><text x="26.8212%" y="303.50">al..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (9,938,025 samples, 2.15%)</title><rect x="27.3132%" y="277" width="2.1513%" height="15" fill="rgb(236,162,54)" fg:x="126174631" fg:w="9938025"/><text x="27.5632%" y="287.50">c..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (14,591,418 samples, 3.16%)</title><rect x="33.9765%" y="277" width="3.1586%" height="15" fill="rgb(220,229,9)" fg:x="156956191" fg:w="14591418"/><text x="34.2265%" y="287.50">all..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (7,165,632 samples, 1.55%)</title><rect x="35.5839%" y="261" width="1.5512%" height="15" fill="rgb(250,87,22)" fg:x="164381977" fg:w="7165632"/><text x="35.8339%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::backtrack::Visited::insert (27,577,896 samples, 5.97%)</title><rect x="37.1351%" y="277" width="5.9698%" height="15" fill="rgb(239,43,17)" fg:x="171547609" fg:w="27577896"/><text x="37.3851%" y="287.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::backtrack::BoundedBacktracker::backtrack (78,361,983 samples, 16.96%)</title><rect x="26.5712%" y="309" width="16.9631%" height="15" fill="rgb(231,177,25)" fg:x="122746943" fg:w="78361983"/><text x="26.8212%" y="319.50">regex_automata::nfa::thomp..</text></g><g><title>regex_automata::nfa::thompson::backtrack::BoundedBacktracker::step (64,996,270 samples, 14.07%)</title><rect x="29.4644%" y="293" width="14.0698%" height="15" fill="rgb(219,179,1)" fg:x="136112656" fg:w="64996270"/><text x="29.7144%" y="303.50">regex_automata::nfa::..</text></g><g><title>regex_automata::nfa::thompson::nfa::SparseTransitions::matches (1,983,421 samples, 0.43%)</title><rect x="43.1049%" y="277" width="0.4294%" height="15" fill="rgb(238,219,53)" fg:x="199125505" fg:w="1983421"/><text x="43.3549%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (1,983,421 samples, 0.43%)</title><rect x="43.1049%" y="261" width="0.4294%" height="15" fill="rgb(232,167,36)" fg:x="199125505" fg:w="1983421"/><text x="43.3549%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::SparseTransitions::matches::_{{closure}} (1,983,421 samples, 0.43%)</title><rect x="43.1049%" y="245" width="0.4294%" height="15" fill="rgb(244,19,51)" fg:x="199125505" fg:w="1983421"/><text x="43.3549%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::Core::search_slots_nofail (79,873,105 samples, 17.29%)</title><rect x="26.5712%" y="389" width="17.2902%" height="15" fill="rgb(224,6,22)" fg:x="122746943" fg:w="79873105"/><text x="26.8212%" y="399.50">regex_automata::meta::strat..</text></g><g><title>regex_automata::meta::wrappers::BoundedBacktrackerEngine::search_slots (79,873,105 samples, 17.29%)</title><rect x="26.5712%" y="373" width="17.2902%" height="15" fill="rgb(224,145,5)" fg:x="122746943" fg:w="79873105"/><text x="26.8212%" y="383.50">regex_automata::meta::wrapp..</text></g><g><title>regex_automata::nfa::thompson::backtrack::BoundedBacktracker::try_search_slots (79,873,105 samples, 17.29%)</title><rect x="26.5712%" y="357" width="17.2902%" height="15" fill="rgb(234,130,49)" fg:x="122746943" fg:w="79873105"/><text x="26.8212%" y="367.50">regex_automata::nfa::thomps..</text></g><g><title>regex_automata::nfa::thompson::backtrack::BoundedBacktracker::try_search_slots_imp (79,873,105 samples, 17.29%)</title><rect x="26.5712%" y="341" width="17.2902%" height="15" fill="rgb(254,6,2)" fg:x="122746943" fg:w="79873105"/><text x="26.8212%" y="351.50">regex_automata::nfa::thomps..</text></g><g><title>regex_automata::nfa::thompson::backtrack::BoundedBacktracker::search_imp (79,873,105 samples, 17.29%)</title><rect x="26.5712%" y="325" width="17.2902%" height="15" fill="rgb(208,96,46)" fg:x="122746943" fg:w="79873105"/><text x="26.8212%" y="335.50">regex_automata::nfa::thomps..</text></g><g><title>regex_automata::nfa::thompson::backtrack::Cache::setup_search (1,511,122 samples, 0.33%)</title><rect x="43.5343%" y="309" width="0.3271%" height="15" fill="rgb(239,3,39)" fg:x="201108926" fg:w="1511122"/><text x="43.7843%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::backtrack::Visited::setup_search (1,511,122 samples, 0.33%)</title><rect x="43.5343%" y="293" width="0.3271%" height="15" fill="rgb(233,210,1)" fg:x="201108926" fg:w="1511122"/><text x="43.7843%" y="303.50"></text></g><g><title>[libc.so.6] (1,511,122 samples, 0.33%)</title><rect x="43.5343%" y="277" width="0.3271%" height="15" fill="rgb(244,137,37)" fg:x="201108926" fg:w="1511122"/><text x="43.7843%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::DFA::next_state (1,629,997 samples, 0.35%)</title><rect x="43.8614%" y="293" width="0.3528%" height="15" fill="rgb(240,136,2)" fg:x="202620048" fg:w="1629997"/><text x="44.1114%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1,629,997 samples, 0.35%)</title><rect x="43.8614%" y="277" width="0.3528%" height="15" fill="rgb(239,18,37)" fg:x="202620048" fg:w="1629997"/><text x="44.1114%" y="287.50"></text></g><g><title>regex_automata::util::determinize::next (1,629,997 samples, 0.35%)</title><rect x="43.8614%" y="261" width="0.3528%" height="15" fill="rgb(218,185,22)" fg:x="202620048" fg:w="1629997"/><text x="44.1114%" y="271.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1,629,997 samples, 0.35%)</title><rect x="43.8614%" y="245" width="0.3528%" height="15" fill="rgb(225,218,4)" fg:x="202620048" fg:w="1629997"/><text x="44.1114%" y="255.50"></text></g><g><title>regex_automata::util::determinize::state::Repr::iter_nfa_state_ids (1,629,997 samples, 0.35%)</title><rect x="43.8614%" y="229" width="0.3528%" height="15" fill="rgb(230,182,32)" fg:x="202620048" fg:w="1629997"/><text x="44.1114%" y="239.50"></text></g><g><title>regex_automata::util::determinize::next::_{{closure}} (1,629,997 samples, 0.35%)</title><rect x="43.8614%" y="213" width="0.3528%" height="15" fill="rgb(242,56,43)" fg:x="202620048" fg:w="1629997"/><text x="44.1114%" y="223.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSet::insert (1,629,997 samples, 0.35%)</title><rect x="43.8614%" y="197" width="0.3528%" height="15" fill="rgb(233,99,24)" fg:x="202620048" fg:w="1629997"/><text x="44.1114%" y="207.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSet::contains (1,629,997 samples, 0.35%)</title><rect x="43.8614%" y="181" width="0.3528%" height="15" fill="rgb(234,209,42)" fg:x="202620048" fg:w="1629997"/><text x="44.1114%" y="191.50"></text></g><g><title>regex_automata::util::primitives::&lt;impl core::ops::index::Index&lt;regex_automata::util::primitives::StateID&gt; for alloc::vec::Vec&lt;T&gt;&gt;::index (1,629,997 samples, 0.35%)</title><rect x="43.8614%" y="165" width="0.3528%" height="15" fill="rgb(227,7,12)" fg:x="202620048" fg:w="1629997"/><text x="44.1114%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1,629,997 samples, 0.35%)</title><rect x="43.8614%" y="149" width="0.3528%" height="15" fill="rgb(245,203,43)" fg:x="202620048" fg:w="1629997"/><text x="44.1114%" y="159.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,629,997 samples, 0.35%)</title><rect x="43.8614%" y="133" width="0.3528%" height="15" fill="rgb(238,205,33)" fg:x="202620048" fg:w="1629997"/><text x="44.1114%" y="143.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,629,997 samples, 0.35%)</title><rect x="43.8614%" y="117" width="0.3528%" height="15" fill="rgb(231,56,7)" fg:x="202620048" fg:w="1629997"/><text x="44.1114%" y="127.50"></text></g><g><title>regex_automata::hybrid::dfa::DFA::next_state_untagged_unchecked (7,965,032 samples, 1.72%)</title><rect x="44.2142%" y="293" width="1.7242%" height="15" fill="rgb(244,186,29)" fg:x="204250045" fg:w="7965032"/><text x="44.4642%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::DFA::try_search_fwd (11,014,124 samples, 2.38%)</title><rect x="43.8614%" y="341" width="2.3842%" height="15" fill="rgb(234,111,31)" fg:x="202620048" fg:w="11014124"/><text x="44.1114%" y="351.50">re..</text></g><g><title>regex_automata::hybrid::search::find_fwd (11,014,124 samples, 2.38%)</title><rect x="43.8614%" y="325" width="2.3842%" height="15" fill="rgb(241,149,10)" fg:x="202620048" fg:w="11014124"/><text x="44.1114%" y="335.50">re..</text></g><g><title>regex_automata::hybrid::search::find_fwd_imp (11,014,124 samples, 2.38%)</title><rect x="43.8614%" y="309" width="2.3842%" height="15" fill="rgb(249,206,44)" fg:x="202620048" fg:w="11014124"/><text x="44.1114%" y="319.50">re..</text></g><g><title>regex_automata::util::prefilter::Prefilter::find (1,419,095 samples, 0.31%)</title><rect x="45.9384%" y="293" width="0.3072%" height="15" fill="rgb(251,153,30)" fg:x="212215077" fg:w="1419095"/><text x="46.1884%" y="303.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;P&gt; as regex_automata::util::prefilter::PrefilterI&gt;::find (1,419,095 samples, 0.31%)</title><rect x="45.9384%" y="277" width="0.3072%" height="15" fill="rgb(239,152,38)" fg:x="212215077" fg:w="1419095"/><text x="46.1884%" y="287.50"></text></g><g><title>&lt;regex_automata::util::prefilter::memmem::Memmem as regex_automata::util::prefilter::PrefilterI&gt;::find (1,419,095 samples, 0.31%)</title><rect x="45.9384%" y="261" width="0.3072%" height="15" fill="rgb(249,139,47)" fg:x="212215077" fg:w="1419095"/><text x="46.1884%" y="271.50"></text></g><g><title>memchr::memmem::Finder::find (1,419,095 samples, 0.31%)</title><rect x="45.9384%" y="245" width="0.3072%" height="15" fill="rgb(244,64,35)" fg:x="212215077" fg:w="1419095"/><text x="46.1884%" y="255.50"></text></g><g><title>memchr::memmem::searcher::Searcher::find (1,419,095 samples, 0.31%)</title><rect x="45.9384%" y="229" width="0.3072%" height="15" fill="rgb(216,46,15)" fg:x="212215077" fg:w="1419095"/><text x="46.1884%" y="239.50"></text></g><g><title>memchr::arch::x86_64::avx2::packedpair::Finder::find_impl (1,419,095 samples, 0.31%)</title><rect x="45.9384%" y="213" width="0.3072%" height="15" fill="rgb(250,74,19)" fg:x="212215077" fg:w="1419095"/><text x="46.1884%" y="223.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (11,989,369 samples, 2.60%)</title><rect x="46.8860%" y="325" width="2.5954%" height="15" fill="rgb(249,42,33)" fg:x="216592716" fg:w="11989369"/><text x="47.1360%" y="335.50">re..</text></g><g><title>regex_automata::hybrid::search::find_rev_imp (11,989,369 samples, 2.60%)</title><rect x="46.8860%" y="309" width="2.5954%" height="15" fill="rgb(242,149,17)" fg:x="216592716" fg:w="11989369"/><text x="47.1360%" y="319.50">re..</text></g><g><title>regex_automata::hybrid::dfa::DFA::next_state_untagged_unchecked (10,327,608 samples, 2.24%)</title><rect x="47.2458%" y="293" width="2.2356%" height="15" fill="rgb(244,29,21)" fg:x="218254477" fg:w="10327608"/><text x="47.4958%" y="303.50">r..</text></g><g><title>regex_automata::util::alphabet::ByteClasses::get (3,212,891 samples, 0.70%)</title><rect x="48.7859%" y="277" width="0.6955%" height="15" fill="rgb(220,130,37)" fg:x="225369194" fg:w="3212891"/><text x="49.0359%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_slots (107,571,262 samples, 23.29%)</title><rect x="26.5712%" y="405" width="23.2861%" height="15" fill="rgb(211,67,2)" fg:x="122746943" fg:w="107571262"/><text x="26.8212%" y="415.50">&lt;regex_automata::meta::strategy::Core..</text></g><g><title>regex_automata::meta::strategy::Core::try_search_mayfail (27,698,157 samples, 6.00%)</title><rect x="43.8614%" y="389" width="5.9958%" height="15" fill="rgb(235,68,52)" fg:x="202620048" fg:w="27698157"/><text x="44.1114%" y="399.50">regex_au..</text></g><g><title>regex_automata::meta::wrappers::HybridEngine::try_search (27,698,157 samples, 6.00%)</title><rect x="43.8614%" y="373" width="5.9958%" height="15" fill="rgb(246,142,3)" fg:x="202620048" fg:w="27698157"/><text x="44.1114%" y="383.50">regex_au..</text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (27,698,157 samples, 6.00%)</title><rect x="43.8614%" y="357" width="5.9958%" height="15" fill="rgb(241,25,7)" fg:x="202620048" fg:w="27698157"/><text x="44.1114%" y="367.50">regex_au..</text></g><g><title>regex_automata::hybrid::dfa::DFA::try_search_rev (16,684,033 samples, 3.61%)</title><rect x="46.2456%" y="341" width="3.6116%" height="15" fill="rgb(242,119,39)" fg:x="213634172" fg:w="16684033"/><text x="46.4956%" y="351.50">rege..</text></g><g><title>regex_automata::nfa::thompson::nfa::NFA::has_empty (1,736,120 samples, 0.38%)</title><rect x="49.4814%" y="325" width="0.3758%" height="15" fill="rgb(241,98,45)" fg:x="228582085" fg:w="1736120"/><text x="49.7314%" y="335.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1,736,120 samples, 0.38%)</title><rect x="49.4814%" y="309" width="0.3758%" height="15" fill="rgb(254,28,30)" fg:x="228582085" fg:w="1736120"/><text x="49.7314%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (1,736,120 samples, 0.38%)</title><rect x="49.4814%" y="293" width="0.3758%" height="15" fill="rgb(241,142,54)" fg:x="228582085" fg:w="1736120"/><text x="49.7314%" y="303.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1,736,120 samples, 0.38%)</title><rect x="49.4814%" y="277" width="0.3758%" height="15" fill="rgb(222,85,15)" fg:x="228582085" fg:w="1736120"/><text x="49.7314%" y="287.50"></text></g><g><title>emi_web::parse_frame::Buffer::from_string (137,458,850 samples, 29.76%)</title><rect x="20.5593%" y="485" width="29.7559%" height="15" fill="rgb(210,85,47)" fg:x="94974743" fg:w="137458850"/><text x="20.8093%" y="495.50">emi_web::parse_frame::Buffer::from_string</text></g><g><title>regex::regex::string::Regex::captures (111,296,270 samples, 24.09%)</title><rect x="26.2227%" y="469" width="24.0924%" height="15" fill="rgb(224,206,25)" fg:x="121137323" fg:w="111296270"/><text x="26.4727%" y="479.50">regex::regex::string::Regex::captures</text></g><g><title>regex::regex::string::Regex::captures_at (111,296,270 samples, 24.09%)</title><rect x="26.2227%" y="453" width="24.0924%" height="15" fill="rgb(243,201,19)" fg:x="121137323" fg:w="111296270"/><text x="26.4727%" y="463.50">regex::regex::string::Regex::captures_..</text></g><g><title>regex_automata::meta::regex::Regex::search_captures (109,686,650 samples, 23.74%)</title><rect x="26.5712%" y="437" width="23.7440%" height="15" fill="rgb(236,59,4)" fg:x="122746943" fg:w="109686650"/><text x="26.8212%" y="447.50">regex_automata::meta::regex::Regex::se..</text></g><g><title>regex_automata::meta::regex::Regex::search_slots (109,686,650 samples, 23.74%)</title><rect x="26.5712%" y="421" width="23.7440%" height="15" fill="rgb(254,179,45)" fg:x="122746943" fg:w="109686650"/><text x="26.8212%" y="431.50">regex_automata::meta::regex::Regex::se..</text></g><g><title>regex_automata::util::pool::Pool&lt;T,F&gt;::get (2,115,388 samples, 0.46%)</title><rect x="49.8572%" y="405" width="0.4579%" height="15" fill="rgb(226,14,10)" fg:x="230318205" fg:w="2115388"/><text x="50.1072%" y="415.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get (2,115,388 samples, 0.46%)</title><rect x="49.8572%" y="389" width="0.4579%" height="15" fill="rgb(244,27,41)" fg:x="230318205" fg:w="2115388"/><text x="50.1072%" y="399.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2,115,388 samples, 0.46%)</title><rect x="49.8572%" y="373" width="0.4579%" height="15" fill="rgb(235,35,32)" fg:x="230318205" fg:w="2115388"/><text x="50.1072%" y="383.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (2,115,388 samples, 0.46%)</title><rect x="49.8572%" y="357" width="0.4579%" height="15" fill="rgb(218,68,31)" fg:x="230318205" fg:w="2115388"/><text x="50.1072%" y="367.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::try_lock (2,115,388 samples, 0.46%)</title><rect x="49.8572%" y="341" width="0.4579%" height="15" fill="rgb(207,120,37)" fg:x="230318205" fg:w="2115388"/><text x="50.1072%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (2,115,388 samples, 0.46%)</title><rect x="49.8572%" y="325" width="0.4579%" height="15" fill="rgb(227,98,0)" fg:x="230318205" fg:w="2115388"/><text x="50.1072%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2,115,388 samples, 0.46%)</title><rect x="49.8572%" y="309" width="0.4579%" height="15" fill="rgb(207,7,3)" fg:x="230318205" fg:w="2115388"/><text x="50.1072%" y="319.50"></text></g><g><title>serde_json::ser::to_string (2,115,388 samples, 0.46%)</title><rect x="50.3151%" y="485" width="0.4579%" height="15" fill="rgb(206,98,19)" fg:x="232433593" fg:w="2115388"/><text x="50.5651%" y="495.50"></text></g><g><title>serde_json::ser::to_vec (2,115,388 samples, 0.46%)</title><rect x="50.3151%" y="469" width="0.4579%" height="15" fill="rgb(217,5,26)" fg:x="232433593" fg:w="2115388"/><text x="50.5651%" y="479.50"></text></g><g><title>serde_json::ser::to_writer (2,115,388 samples, 0.46%)</title><rect x="50.3151%" y="453" width="0.4579%" height="15" fill="rgb(235,190,38)" fg:x="232433593" fg:w="2115388"/><text x="50.5651%" y="463.50"></text></g><g><title>emi_web::parse_frame::_::&lt;impl serde::ser::Serialize for emi_web::parse_frame::Buffer&gt;::serialize (2,115,388 samples, 0.46%)</title><rect x="50.3151%" y="437" width="0.4579%" height="15" fill="rgb(247,86,24)" fg:x="232433593" fg:w="2115388"/><text x="50.5651%" y="447.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (2,115,388 samples, 0.46%)</title><rect x="50.3151%" y="421" width="0.4579%" height="15" fill="rgb(205,101,16)" fg:x="232433593" fg:w="2115388"/><text x="50.5651%" y="431.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2,115,388 samples, 0.46%)</title><rect x="50.3151%" y="405" width="0.4579%" height="15" fill="rgb(246,168,33)" fg:x="232433593" fg:w="2115388"/><text x="50.5651%" y="415.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_key (2,115,388 samples, 0.46%)</title><rect x="50.3151%" y="389" width="0.4579%" height="15" fill="rgb(231,114,1)" fg:x="232433593" fg:w="2115388"/><text x="50.5651%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for str&gt;::serialize (2,115,388 samples, 0.46%)</title><rect x="50.3151%" y="373" width="0.4579%" height="15" fill="rgb(207,184,53)" fg:x="232433593" fg:w="2115388"/><text x="50.5651%" y="383.50"></text></g><g><title>&lt;serde_json::ser::MapKeySerializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (2,115,388 samples, 0.46%)</title><rect x="50.3151%" y="357" width="0.4579%" height="15" fill="rgb(224,95,51)" fg:x="232433593" fg:w="2115388"/><text x="50.5651%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (2,115,388 samples, 0.46%)</title><rect x="50.3151%" y="341" width="0.4579%" height="15" fill="rgb(212,188,45)" fg:x="232433593" fg:w="2115388"/><text x="50.5651%" y="351.50"></text></g><g><title>serde_json::ser::format_escaped_str (2,115,388 samples, 0.46%)</title><rect x="50.3151%" y="325" width="0.4579%" height="15" fill="rgb(223,154,38)" fg:x="232433593" fg:w="2115388"/><text x="50.5651%" y="335.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (2,115,388 samples, 0.46%)</title><rect x="50.3151%" y="309" width="0.4579%" height="15" fill="rgb(251,22,52)" fg:x="232433593" fg:w="2115388"/><text x="50.5651%" y="319.50"></text></g><g><title>alloc::string::String::try_reserve_exact (2,777,870 samples, 0.60%)</title><rect x="50.7731%" y="453" width="0.6013%" height="15" fill="rgb(229,209,22)" fg:x="234548981" fg:w="2777870"/><text x="51.0231%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::try_reserve_exact (2,777,870 samples, 0.60%)</title><rect x="50.7731%" y="437" width="0.6013%" height="15" fill="rgb(234,138,34)" fg:x="234548981" fg:w="2777870"/><text x="51.0231%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (2,777,870 samples, 0.60%)</title><rect x="50.7731%" y="421" width="0.6013%" height="15" fill="rgb(212,95,11)" fg:x="234548981" fg:w="2777870"/><text x="51.0231%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_reserve_exact (2,777,870 samples, 0.60%)</title><rect x="50.7731%" y="405" width="0.6013%" height="15" fill="rgb(240,179,47)" fg:x="234548981" fg:w="2777870"/><text x="51.0231%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_exact (2,777,870 samples, 0.60%)</title><rect x="50.7731%" y="389" width="0.6013%" height="15" fill="rgb(240,163,11)" fg:x="234548981" fg:w="2777870"/><text x="51.0231%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (2,777,870 samples, 0.60%)</title><rect x="50.7731%" y="373" width="0.6013%" height="15" fill="rgb(236,37,12)" fg:x="234548981" fg:w="2777870"/><text x="51.0231%" y="383.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (179,324,673 samples, 38.82%)</title><rect x="12.9174%" y="917" width="38.8186%" height="15" fill="rgb(232,164,16)" fg:x="59672445" fg:w="179324673"/><text x="13.1674%" y="927.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (179,324,673 samples, 38.82%)</title><rect x="12.9174%" y="901" width="38.8186%" height="15" fill="rgb(244,205,15)" fg:x="59672445" fg:w="179324673"/><text x="13.1674%" y="911.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (179,324,673 samples, 38.82%)</title><rect x="12.9174%" y="885" width="38.8186%" height="15" fill="rgb(223,117,47)" fg:x="59672445" fg:w="179324673"/><text x="13.1674%" y="895.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (179,324,673 samples, 38.82%)</title><rect x="12.9174%" y="869" width="38.8186%" height="15" fill="rgb(244,107,35)" fg:x="59672445" fg:w="179324673"/><text x="13.1674%" y="879.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (179,324,673 samples, 38.82%)</title><rect x="12.9174%" y="853" width="38.8186%" height="15" fill="rgb(205,140,8)" fg:x="59672445" fg:w="179324673"/><text x="13.1674%" y="863.50">&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::futur..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (179,324,673 samples, 38.82%)</title><rect x="12.9174%" y="837" width="38.8186%" height="15" fill="rgb(228,84,46)" fg:x="59672445" fg:w="179324673"/><text x="13.1674%" y="847.50">tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (179,324,673 samples, 38.82%)</title><rect x="12.9174%" y="821" width="38.8186%" height="15" fill="rgb(254,188,9)" fg:x="59672445" fg:w="179324673"/><text x="13.1674%" y="831.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (179,324,673 samples, 38.82%)</title><rect x="12.9174%" y="805" width="38.8186%" height="15" fill="rgb(206,112,54)" fg:x="59672445" fg:w="179324673"/><text x="13.1674%" y="815.50">tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (166,432,138 samples, 36.03%)</title><rect x="15.7082%" y="789" width="36.0277%" height="15" fill="rgb(216,84,49)" fg:x="72564980" fg:w="166432138"/><text x="15.9582%" y="799.50">tokio::runtime::scheduler::multi_thread::worker::Context::r..</text></g><g><title>tokio::runtime::coop::budget (166,432,138 samples, 36.03%)</title><rect x="15.7082%" y="773" width="36.0277%" height="15" fill="rgb(214,194,35)" fg:x="72564980" fg:w="166432138"/><text x="15.9582%" y="783.50">tokio::runtime::coop::budget</text></g><g><title>tokio::runtime::coop::with_budget (166,432,138 samples, 36.03%)</title><rect x="15.7082%" y="757" width="36.0277%" height="15" fill="rgb(249,28,3)" fg:x="72564980" fg:w="166432138"/><text x="15.9582%" y="767.50">tokio::runtime::coop::with_budget</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::_{{closure}} (166,432,138 samples, 36.03%)</title><rect x="15.7082%" y="741" width="36.0277%" height="15" fill="rgb(222,56,52)" fg:x="72564980" fg:w="166432138"/><text x="15.9582%" y="751.50">tokio::runtime::scheduler::multi_thread::worker::Context::r..</text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (164,448,717 samples, 35.60%)</title><rect x="16.1376%" y="725" width="35.5984%" height="15" fill="rgb(245,217,50)" fg:x="74548401" fg:w="164448717"/><text x="16.3876%" y="735.50">tokio::runtime::task::LocalNotified&lt;S&gt;::run</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (164,448,717 samples, 35.60%)</title><rect x="16.1376%" y="709" width="35.5984%" height="15" fill="rgb(213,201,24)" fg:x="74548401" fg:w="164448717"/><text x="16.3876%" y="719.50">tokio::runtime::task::raw::RawTask::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (164,448,717 samples, 35.60%)</title><rect x="16.1376%" y="693" width="35.5984%" height="15" fill="rgb(248,116,28)" fg:x="74548401" fg:w="164448717"/><text x="16.3876%" y="703.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (164,448,717 samples, 35.60%)</title><rect x="16.1376%" y="677" width="35.5984%" height="15" fill="rgb(219,72,43)" fg:x="74548401" fg:w="164448717"/><text x="16.3876%" y="687.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner</text></g><g><title>tokio::runtime::task::harness::poll_future (164,448,717 samples, 35.60%)</title><rect x="16.1376%" y="661" width="35.5984%" height="15" fill="rgb(209,138,14)" fg:x="74548401" fg:w="164448717"/><text x="16.3876%" y="671.50">tokio::runtime::task::harness::poll_future</text></g><g><title>std::panic::catch_unwind (164,448,717 samples, 35.60%)</title><rect x="16.1376%" y="645" width="35.5984%" height="15" fill="rgb(222,18,33)" fg:x="74548401" fg:w="164448717"/><text x="16.3876%" y="655.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (164,448,717 samples, 35.60%)</title><rect x="16.1376%" y="629" width="35.5984%" height="15" fill="rgb(213,199,7)" fg:x="74548401" fg:w="164448717"/><text x="16.3876%" y="639.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (164,448,717 samples, 35.60%)</title><rect x="16.1376%" y="613" width="35.5984%" height="15" fill="rgb(250,110,10)" fg:x="74548401" fg:w="164448717"/><text x="16.3876%" y="623.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (164,448,717 samples, 35.60%)</title><rect x="16.1376%" y="597" width="35.5984%" height="15" fill="rgb(248,123,6)" fg:x="74548401" fg:w="164448717"/><text x="16.3876%" y="607.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::op..</text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (164,448,717 samples, 35.60%)</title><rect x="16.1376%" y="581" width="35.5984%" height="15" fill="rgb(206,91,31)" fg:x="74548401" fg:w="164448717"/><text x="16.3876%" y="591.50">tokio::runtime::task::harness::poll_future::_{{closure}}</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (164,448,717 samples, 35.60%)</title><rect x="16.1376%" y="565" width="35.5984%" height="15" fill="rgb(211,154,13)" fg:x="74548401" fg:w="164448717"/><text x="16.3876%" y="575.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (164,448,717 samples, 35.60%)</title><rect x="16.1376%" y="549" width="35.5984%" height="15" fill="rgb(225,148,7)" fg:x="74548401" fg:w="164448717"/><text x="16.3876%" y="559.50">tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (164,448,717 samples, 35.60%)</title><rect x="16.1376%" y="533" width="35.5984%" height="15" fill="rgb(220,160,43)" fg:x="74548401" fg:w="164448717"/><text x="16.3876%" y="543.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}}</text></g><g><title>emi_web::init_and_stream_tui::_{{closure}} (148,769,807 samples, 32.20%)</title><rect x="19.5316%" y="517" width="32.2044%" height="15" fill="rgb(213,52,39)" fg:x="90227311" fg:w="148769807"/><text x="19.7816%" y="527.50">emi_web::init_and_stream_tui::_{{closure}}</text></g><g><title>emi_web::read_buffer_with_retry_to_json (145,612,699 samples, 31.52%)</title><rect x="20.2150%" y="501" width="31.5209%" height="15" fill="rgb(243,137,7)" fg:x="93384419" fg:w="145612699"/><text x="20.4650%" y="511.50">emi_web::read_buffer_with_retry_to_json</text></g><g><title>std::fs::read_to_string (4,448,137 samples, 0.96%)</title><rect x="50.7731%" y="485" width="0.9629%" height="15" fill="rgb(230,79,13)" fg:x="234548981" fg:w="4448137"/><text x="51.0231%" y="495.50"></text></g><g><title>std::fs::read_to_string::inner (4,448,137 samples, 0.96%)</title><rect x="50.7731%" y="469" width="0.9629%" height="15" fill="rgb(247,105,23)" fg:x="234548981" fg:w="4448137"/><text x="51.0231%" y="479.50"></text></g><g><title>std::io::default_read_to_string (1,670,267 samples, 0.36%)</title><rect x="51.3744%" y="453" width="0.3616%" height="15" fill="rgb(223,179,41)" fg:x="237326851" fg:w="1670267"/><text x="51.6244%" y="463.50"></text></g><g><title>std::io::append_to_string (1,670,267 samples, 0.36%)</title><rect x="51.3744%" y="437" width="0.3616%" height="15" fill="rgb(218,9,34)" fg:x="237326851" fg:w="1670267"/><text x="51.6244%" y="447.50"></text></g><g><title>core::str::converts::from_utf8 (1,670,267 samples, 0.36%)</title><rect x="51.3744%" y="421" width="0.3616%" height="15" fill="rgb(222,106,8)" fg:x="237326851" fg:w="1670267"/><text x="51.6244%" y="431.50"></text></g><g><title>core::str::validations::run_utf8_validation (1,670,267 samples, 0.36%)</title><rect x="51.3744%" y="405" width="0.3616%" height="15" fill="rgb(211,220,0)" fg:x="237326851" fg:w="1670267"/><text x="51.6244%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1,670,267 samples, 0.36%)</title><rect x="51.3744%" y="389" width="0.3616%" height="15" fill="rgb(229,52,16)" fg:x="237326851" fg:w="1670267"/><text x="51.6244%" y="399.50"></text></g><g><title>emi_web::tui::App::check_exit (3,225,634 samples, 0.70%)</title><rect x="51.7359%" y="757" width="0.6983%" height="15" fill="rgb(212,155,18)" fg:x="238997118" fg:w="3225634"/><text x="51.9859%" y="767.50"></text></g><g><title>alloc::fmt::format (3,225,634 samples, 0.70%)</title><rect x="51.7359%" y="741" width="0.6983%" height="15" fill="rgb(242,21,14)" fg:x="238997118" fg:w="3225634"/><text x="51.9859%" y="751.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (3,225,634 samples, 0.70%)</title><rect x="51.7359%" y="725" width="0.6983%" height="15" fill="rgb(222,19,48)" fg:x="238997118" fg:w="3225634"/><text x="51.9859%" y="735.50"></text></g><g><title>alloc::fmt::format::_{{closure}} (3,225,634 samples, 0.70%)</title><rect x="51.7359%" y="709" width="0.6983%" height="15" fill="rgb(232,45,27)" fg:x="238997118" fg:w="3225634"/><text x="51.9859%" y="719.50"></text></g><g><title>alloc::fmt::format::format_inner (3,225,634 samples, 0.70%)</title><rect x="51.7359%" y="693" width="0.6983%" height="15" fill="rgb(249,103,42)" fg:x="238997118" fg:w="3225634"/><text x="51.9859%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (3,225,634 samples, 0.70%)</title><rect x="51.7359%" y="677" width="0.6983%" height="15" fill="rgb(246,81,33)" fg:x="238997118" fg:w="3225634"/><text x="51.9859%" y="687.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write::write_fmt::SpecWriteFmt&gt;::spec_write_fmt (3,225,634 samples, 0.70%)</title><rect x="51.7359%" y="661" width="0.6983%" height="15" fill="rgb(252,33,42)" fg:x="238997118" fg:w="3225634"/><text x="51.9859%" y="671.50"></text></g><g><title>core::fmt::write (3,225,634 samples, 0.70%)</title><rect x="51.7359%" y="645" width="0.6983%" height="15" fill="rgb(209,212,41)" fg:x="238997118" fg:w="3225634"/><text x="51.9859%" y="655.50"></text></g><g><title>core::fmt::rt::Argument::fmt (3,225,634 samples, 0.70%)</title><rect x="51.7359%" y="629" width="0.6983%" height="15" fill="rgb(207,154,6)" fg:x="238997118" fg:w="3225634"/><text x="51.9859%" y="639.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (3,225,634 samples, 0.70%)</title><rect x="51.7359%" y="613" width="0.6983%" height="15" fill="rgb(223,64,47)" fg:x="238997118" fg:w="3225634"/><text x="51.9859%" y="623.50"></text></g><g><title>&lt;core::option::Option&lt;W&gt; as ratatui::widgets::WidgetRef&gt;::render_ref (3,271,710 samples, 0.71%)</title><rect x="52.4342%" y="613" width="0.7082%" height="15" fill="rgb(211,161,38)" fg:x="242222752" fg:w="3271710"/><text x="52.6842%" y="623.50"></text></g><g><title>ratatui::widgets::block::Block::render_title_position (3,271,710 samples, 0.71%)</title><rect x="52.4342%" y="597" width="0.7082%" height="15" fill="rgb(219,138,40)" fg:x="242222752" fg:w="3271710"/><text x="52.6842%" y="607.50"></text></g><g><title>ratatui::widgets::block::Block::render_center_titles (3,271,710 samples, 0.71%)</title><rect x="52.4342%" y="581" width="0.7082%" height="15" fill="rgb(241,228,46)" fg:x="242222752" fg:w="3271710"/><text x="52.6842%" y="591.50"></text></g><g><title>&lt;ratatui::text::line::Line as ratatui::widgets::WidgetRef&gt;::render_ref (3,271,710 samples, 0.71%)</title><rect x="52.4342%" y="565" width="0.7082%" height="15" fill="rgb(223,209,38)" fg:x="242222752" fg:w="3271710"/><text x="52.6842%" y="575.50"></text></g><g><title>ratatui::text::line::render_spans (3,271,710 samples, 0.71%)</title><rect x="52.4342%" y="549" width="0.7082%" height="15" fill="rgb(236,164,45)" fg:x="242222752" fg:w="3271710"/><text x="52.6842%" y="559.50"></text></g><g><title>&lt;ratatui::text::span::Span as ratatui::widgets::WidgetRef&gt;::render_ref (3,271,710 samples, 0.71%)</title><rect x="52.4342%" y="533" width="0.7082%" height="15" fill="rgb(231,15,5)" fg:x="242222752" fg:w="3271710"/><text x="52.6842%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,271,710 samples, 0.71%)</title><rect x="52.4342%" y="517" width="0.7082%" height="15" fill="rgb(252,35,15)" fg:x="242222752" fg:w="3271710"/><text x="52.6842%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,271,710 samples, 0.71%)</title><rect x="52.4342%" y="501" width="0.7082%" height="15" fill="rgb(248,181,18)" fg:x="242222752" fg:w="3271710"/><text x="52.6842%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,271,710 samples, 0.71%)</title><rect x="52.4342%" y="485" width="0.7082%" height="15" fill="rgb(233,39,42)" fg:x="242222752" fg:w="3271710"/><text x="52.6842%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (3,271,710 samples, 0.71%)</title><rect x="52.4342%" y="469" width="0.7082%" height="15" fill="rgb(238,110,33)" fg:x="242222752" fg:w="3271710"/><text x="52.6842%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3,271,710 samples, 0.71%)</title><rect x="52.4342%" y="453" width="0.7082%" height="15" fill="rgb(233,195,10)" fg:x="242222752" fg:w="3271710"/><text x="52.6842%" y="463.50"></text></g><g><title>&lt;unicode_segmentation::grapheme::Graphemes as core::iter::traits::iterator::Iterator&gt;::next (3,271,710 samples, 0.71%)</title><rect x="52.4342%" y="437" width="0.7082%" height="15" fill="rgb(254,105,3)" fg:x="242222752" fg:w="3271710"/><text x="52.6842%" y="447.50"></text></g><g><title>unicode_segmentation::grapheme::GraphemeCursor::next_boundary (3,271,710 samples, 0.71%)</title><rect x="52.4342%" y="421" width="0.7082%" height="15" fill="rgb(221,225,9)" fg:x="242222752" fg:w="3271710"/><text x="52.6842%" y="431.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (3,271,710 samples, 0.71%)</title><rect x="52.4342%" y="405" width="0.7082%" height="15" fill="rgb(224,227,45)" fg:x="242222752" fg:w="3271710"/><text x="52.6842%" y="415.50"></text></g><g><title>core::str::validations::next_code_point (3,271,710 samples, 0.71%)</title><rect x="52.4342%" y="389" width="0.7082%" height="15" fill="rgb(229,198,43)" fg:x="242222752" fg:w="3271710"/><text x="52.6842%" y="399.50"></text></g><g><title>ratatui::style::_::&lt;impl ratatui::style::Modifier&gt;::insert (7,625,754 samples, 1.65%)</title><rect x="53.1424%" y="581" width="1.6508%" height="15" fill="rgb(206,209,35)" fg:x="245494462" fg:w="7625754"/><text x="53.3924%" y="591.50"></text></g><g><title>ratatui::style::_::InternalBitFlags::insert (7,625,754 samples, 1.65%)</title><rect x="53.1424%" y="565" width="1.6508%" height="15" fill="rgb(245,195,53)" fg:x="245494462" fg:w="7625754"/><text x="53.3924%" y="575.50"></text></g><g><title>ratatui::style::_::InternalBitFlags::bits (7,625,754 samples, 1.65%)</title><rect x="53.1424%" y="549" width="1.6508%" height="15" fill="rgb(240,92,26)" fg:x="245494462" fg:w="7625754"/><text x="53.3924%" y="559.50"></text></g><g><title>ratatui::buffer::buffer::Buffer::set_style (11,185,030 samples, 2.42%)</title><rect x="53.1424%" y="613" width="2.4212%" height="15" fill="rgb(207,40,23)" fg:x="245494462" fg:w="11185030"/><text x="53.3924%" y="623.50">ra..</text></g><g><title>ratatui::buffer::cell::Cell::set_style (11,185,030 samples, 2.42%)</title><rect x="53.1424%" y="597" width="2.4212%" height="15" fill="rgb(223,111,35)" fg:x="245494462" fg:w="11185030"/><text x="53.3924%" y="607.50">ra..</text></g><g><title>ratatui::style::_::&lt;impl ratatui::style::Modifier&gt;::remove (3,559,276 samples, 0.77%)</title><rect x="54.7932%" y="581" width="0.7705%" height="15" fill="rgb(229,147,28)" fg:x="253120216" fg:w="3559276"/><text x="55.0432%" y="591.50"></text></g><g><title>ratatui::style::_::InternalBitFlags::remove (3,559,276 samples, 0.77%)</title><rect x="54.7932%" y="565" width="0.7705%" height="15" fill="rgb(211,29,28)" fg:x="253120216" fg:w="3559276"/><text x="55.0432%" y="575.50"></text></g><g><title>ratatui::style::_::InternalBitFlags::difference (3,559,276 samples, 0.77%)</title><rect x="54.7932%" y="549" width="0.7705%" height="15" fill="rgb(228,72,33)" fg:x="253120216" fg:w="3559276"/><text x="55.0432%" y="559.50"></text></g><g><title>ratatui::buffer::buffer::Buffer::set_style (8,778,220 samples, 1.90%)</title><rect x="55.5637%" y="597" width="1.9002%" height="15" fill="rgb(205,214,31)" fg:x="256679492" fg:w="8778220"/><text x="55.8137%" y="607.50">r..</text></g><g><title>ratatui::buffer::cell::Cell::set_style (8,778,220 samples, 1.90%)</title><rect x="55.5637%" y="581" width="1.9002%" height="15" fill="rgb(224,111,15)" fg:x="256679492" fg:w="8778220"/><text x="55.8137%" y="591.50">r..</text></g><g><title>ratatui::style::_::&lt;impl ratatui::style::Modifier&gt;::remove (8,778,220 samples, 1.90%)</title><rect x="55.5637%" y="565" width="1.9002%" height="15" fill="rgb(253,21,26)" fg:x="256679492" fg:w="8778220"/><text x="55.8137%" y="575.50">r..</text></g><g><title>ratatui::style::_::InternalBitFlags::remove (8,778,220 samples, 1.90%)</title><rect x="55.5637%" y="549" width="1.9002%" height="15" fill="rgb(245,139,43)" fg:x="256679492" fg:w="8778220"/><text x="55.8137%" y="559.50">r..</text></g><g><title>&lt;ratatui::widgets::paragraph::Paragraph as ratatui::widgets::Widget&gt;::render (32,685,974 samples, 7.08%)</title><rect x="52.4342%" y="645" width="7.0756%" height="15" fill="rgb(252,170,7)" fg:x="242222752" fg:w="32685974"/><text x="52.6842%" y="655.50">&lt;ratatui:..</text></g><g><title>&lt;ratatui::widgets::paragraph::Paragraph as ratatui::widgets::WidgetRef&gt;::render_ref (32,685,974 samples, 7.08%)</title><rect x="52.4342%" y="629" width="7.0756%" height="15" fill="rgb(231,118,14)" fg:x="242222752" fg:w="32685974"/><text x="52.6842%" y="639.50">&lt;ratatui:..</text></g><g><title>ratatui::widgets::paragraph::Paragraph::render_paragraph (18,229,234 samples, 3.95%)</title><rect x="55.5637%" y="613" width="3.9461%" height="15" fill="rgb(238,83,0)" fg:x="256679492" fg:w="18229234"/><text x="55.8137%" y="623.50">rata..</text></g><g><title>ratatui::widgets::paragraph::Paragraph::render_text (9,451,014 samples, 2.05%)</title><rect x="57.4639%" y="597" width="2.0459%" height="15" fill="rgb(221,39,39)" fg:x="265457712" fg:w="9451014"/><text x="57.7139%" y="607.50">r..</text></g><g><title>&lt;ratatui::widgets::reflow::LineTruncator&lt;O,I&gt; as ratatui::widgets::reflow::LineComposer&gt;::next_line (9,451,014 samples, 2.05%)</title><rect x="57.4639%" y="581" width="2.0459%" height="15" fill="rgb(222,119,46)" fg:x="265457712" fg:w="9451014"/><text x="57.7139%" y="591.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (9,451,014 samples, 2.05%)</title><rect x="57.4639%" y="565" width="2.0459%" height="15" fill="rgb(222,165,49)" fg:x="265457712" fg:w="9451014"/><text x="57.7139%" y="575.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (9,451,014 samples, 2.05%)</title><rect x="57.4639%" y="549" width="2.0459%" height="15" fill="rgb(219,113,52)" fg:x="265457712" fg:w="9451014"/><text x="57.7139%" y="559.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (9,451,014 samples, 2.05%)</title><rect x="57.4639%" y="533" width="2.0459%" height="15" fill="rgb(214,7,15)" fg:x="265457712" fg:w="9451014"/><text x="57.7139%" y="543.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (9,451,014 samples, 2.05%)</title><rect x="57.4639%" y="517" width="2.0459%" height="15" fill="rgb(235,32,4)" fg:x="265457712" fg:w="9451014"/><text x="57.7139%" y="527.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (9,451,014 samples, 2.05%)</title><rect x="57.4639%" y="501" width="2.0459%" height="15" fill="rgb(238,90,54)" fg:x="265457712" fg:w="9451014"/><text x="57.7139%" y="511.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (9,451,014 samples, 2.05%)</title><rect x="57.4639%" y="485" width="2.0459%" height="15" fill="rgb(213,208,19)" fg:x="265457712" fg:w="9451014"/><text x="57.7139%" y="495.50">&lt;..</text></g><g><title>alloc::alloc::Global::grow_impl (9,451,014 samples, 2.05%)</title><rect x="57.4639%" y="469" width="2.0459%" height="15" fill="rgb(233,156,4)" fg:x="265457712" fg:w="9451014"/><text x="57.7139%" y="479.50">a..</text></g><g><title>alloc::alloc::realloc (9,451,014 samples, 2.05%)</title><rect x="57.4639%" y="453" width="2.0459%" height="15" fill="rgb(207,194,5)" fg:x="265457712" fg:w="9451014"/><text x="57.7139%" y="463.50">a..</text></g><g><title>realloc (9,451,014 samples, 2.05%)</title><rect x="57.4639%" y="437" width="2.0459%" height="15" fill="rgb(206,111,30)" fg:x="265457712" fg:w="9451014"/><text x="57.7139%" y="447.50">r..</text></g><g><title>[libc.so.6] (9,451,014 samples, 2.05%)</title><rect x="57.4639%" y="421" width="2.0459%" height="15" fill="rgb(243,70,54)" fg:x="265457712" fg:w="9451014"/><text x="57.7139%" y="431.50">[..</text></g><g><title>[libc.so.6] (9,451,014 samples, 2.05%)</title><rect x="57.4639%" y="405" width="2.0459%" height="15" fill="rgb(242,28,8)" fg:x="265457712" fg:w="9451014"/><text x="57.7139%" y="415.50">[..</text></g><g><title>&lt;ratatui::buffer::buffer::Buffer as core::ops::index::IndexMut&lt;P&gt;&gt;::index_mut (4,856,032 samples, 1.05%)</title><rect x="59.5098%" y="597" width="1.0512%" height="15" fill="rgb(219,106,18)" fg:x="274908726" fg:w="4856032"/><text x="59.7598%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (4,856,032 samples, 1.05%)</title><rect x="59.5098%" y="581" width="1.0512%" height="15" fill="rgb(244,222,10)" fg:x="274908726" fg:w="4856032"/><text x="59.7598%" y="591.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (4,856,032 samples, 1.05%)</title><rect x="59.5098%" y="565" width="1.0512%" height="15" fill="rgb(236,179,52)" fg:x="274908726" fg:w="4856032"/><text x="59.7598%" y="575.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (4,856,032 samples, 1.05%)</title><rect x="59.5098%" y="549" width="1.0512%" height="15" fill="rgb(213,23,39)" fg:x="274908726" fg:w="4856032"/><text x="59.7598%" y="559.50"></text></g><g><title>ratatui::buffer::buffer::Buffer::set_style (9,359,752 samples, 2.03%)</title><rect x="59.5098%" y="613" width="2.0261%" height="15" fill="rgb(238,48,10)" fg:x="274908726" fg:w="9359752"/><text x="59.7598%" y="623.50">r..</text></g><g><title>ratatui::buffer::cell::Cell::set_style (4,503,720 samples, 0.97%)</title><rect x="60.5610%" y="597" width="0.9749%" height="15" fill="rgb(251,196,23)" fg:x="279764758" fg:w="4503720"/><text x="60.8110%" y="607.50"></text></g><g><title>&lt;tui_big_text::big_text::BigText as ratatui::widgets::Widget&gt;::render (19,812,648 samples, 4.29%)</title><rect x="59.5098%" y="645" width="4.2889%" height="15" fill="rgb(250,152,24)" fg:x="274908726" fg:w="19812648"/><text x="59.7598%" y="655.50">&lt;tui_..</text></g><g><title>tui_big_text::big_text::render_symbol (19,812,648 samples, 4.29%)</title><rect x="59.5098%" y="629" width="4.2889%" height="15" fill="rgb(209,150,17)" fg:x="274908726" fg:w="19812648"/><text x="59.7598%" y="639.50">tui_b..</text></g><g><title>tui_big_text::big_text::render_glyph (10,452,896 samples, 2.26%)</title><rect x="61.5359%" y="613" width="2.2627%" height="15" fill="rgb(234,202,34)" fg:x="284268478" fg:w="10452896"/><text x="61.7859%" y="623.50">t..</text></g><g><title>ratatui::buffer::cell::Cell::set_char (10,452,896 samples, 2.26%)</title><rect x="61.5359%" y="597" width="2.2627%" height="15" fill="rgb(253,148,53)" fg:x="284268478" fg:w="10452896"/><text x="61.7859%" y="607.50">r..</text></g><g><title>core::fmt::Arguments::estimated_capacity (3,225,634 samples, 0.70%)</title><rect x="63.7986%" y="565" width="0.6983%" height="15" fill="rgb(218,129,16)" fg:x="294721374" fg:w="3225634"/><text x="64.0486%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (3,225,634 samples, 0.70%)</title><rect x="63.7986%" y="549" width="0.6983%" height="15" fill="rgb(216,85,19)" fg:x="294721374" fg:w="3225634"/><text x="64.0486%" y="559.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (3,225,634 samples, 0.70%)</title><rect x="63.7986%" y="533" width="0.6983%" height="15" fill="rgb(235,228,7)" fg:x="294721374" fg:w="3225634"/><text x="64.0486%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,225,634 samples, 0.70%)</title><rect x="63.7986%" y="517" width="0.6983%" height="15" fill="rgb(245,175,0)" fg:x="294721374" fg:w="3225634"/><text x="64.0486%" y="527.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,225,634 samples, 0.70%)</title><rect x="63.7986%" y="501" width="0.6983%" height="15" fill="rgb(208,168,36)" fg:x="294721374" fg:w="3225634"/><text x="64.0486%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (18,430,324 samples, 3.99%)</title><rect x="64.4969%" y="485" width="3.9896%" height="15" fill="rgb(246,171,24)" fg:x="297947008" fg:w="18430324"/><text x="64.7469%" y="495.50">&lt;all..</text></g><g><title>alloc::string::String::push_str (18,430,324 samples, 3.99%)</title><rect x="64.4969%" y="469" width="3.9896%" height="15" fill="rgb(215,142,24)" fg:x="297947008" fg:w="18430324"/><text x="64.7469%" y="479.50">allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (18,430,324 samples, 3.99%)</title><rect x="64.4969%" y="453" width="3.9896%" height="15" fill="rgb(250,187,7)" fg:x="297947008" fg:w="18430324"/><text x="64.7469%" y="463.50">allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (18,430,324 samples, 3.99%)</title><rect x="64.4969%" y="437" width="3.9896%" height="15" fill="rgb(228,66,33)" fg:x="297947008" fg:w="18430324"/><text x="64.7469%" y="447.50">&lt;all..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (18,430,324 samples, 3.99%)</title><rect x="64.4969%" y="421" width="3.9896%" height="15" fill="rgb(234,215,21)" fg:x="297947008" fg:w="18430324"/><text x="64.7469%" y="431.50">allo..</text></g><g><title>core::intrinsics::copy_nonoverlapping (18,430,324 samples, 3.99%)</title><rect x="64.4969%" y="405" width="3.9896%" height="15" fill="rgb(222,191,20)" fg:x="297947008" fg:w="18430324"/><text x="64.7469%" y="415.50">core..</text></g><g><title>[libc.so.6] (18,430,324 samples, 3.99%)</title><rect x="64.4969%" y="389" width="3.9896%" height="15" fill="rgb(245,79,54)" fg:x="297947008" fg:w="18430324"/><text x="64.7469%" y="399.50">[lib..</text></g><g><title>&lt;str as unicode_width::UnicodeWidthStr&gt;::width (3,269,978 samples, 0.71%)</title><rect x="68.4865%" y="485" width="0.7079%" height="15" fill="rgb(240,10,37)" fg:x="316377332" fg:w="3269978"/><text x="68.7365%" y="495.50"></text></g><g><title>unicode_width::tables::str_width (3,269,978 samples, 0.71%)</title><rect x="68.4865%" y="469" width="0.7079%" height="15" fill="rgb(214,192,32)" fg:x="316377332" fg:w="3269978"/><text x="68.7365%" y="479.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::rfold (3,269,978 samples, 0.71%)</title><rect x="68.4865%" y="453" width="0.7079%" height="15" fill="rgb(209,36,54)" fg:x="316377332" fg:w="3269978"/><text x="68.7365%" y="463.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (3,269,978 samples, 0.71%)</title><rect x="68.4865%" y="437" width="0.7079%" height="15" fill="rgb(220,10,11)" fg:x="316377332" fg:w="3269978"/><text x="68.7365%" y="447.50"></text></g><g><title>core::str::validations::next_code_point_reverse (3,269,978 samples, 0.71%)</title><rect x="68.4865%" y="421" width="0.7079%" height="15" fill="rgb(221,106,17)" fg:x="316377332" fg:w="3269978"/><text x="68.7365%" y="431.50"></text></g><g><title>core::cmp::max (6,247,013 samples, 1.35%)</title><rect x="69.1944%" y="485" width="1.3523%" height="15" fill="rgb(251,142,44)" fg:x="319647310" fg:w="6247013"/><text x="69.4444%" y="495.50"></text></g><g><title>core::cmp::Ord::max (6,247,013 samples, 1.35%)</title><rect x="69.1944%" y="469" width="1.3523%" height="15" fill="rgb(238,13,15)" fg:x="319647310" fg:w="6247013"/><text x="69.4444%" y="479.50"></text></g><g><title>core::cmp::max_by (6,247,013 samples, 1.35%)</title><rect x="69.1944%" y="453" width="1.3523%" height="15" fill="rgb(208,107,27)" fg:x="319647310" fg:w="6247013"/><text x="69.4444%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_str (3,559,276 samples, 0.77%)</title><rect x="70.5467%" y="485" width="0.7705%" height="15" fill="rgb(205,136,37)" fg:x="325894323" fg:w="3559276"/><text x="70.7967%" y="495.50"></text></g><g><title>alloc::fmt::format (39,135,068 samples, 8.47%)</title><rect x="63.7986%" y="629" width="8.4716%" height="15" fill="rgb(250,205,27)" fg:x="294721374" fg:w="39135068"/><text x="64.0486%" y="639.50">alloc::fmt::..</text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (39,135,068 samples, 8.47%)</title><rect x="63.7986%" y="613" width="8.4716%" height="15" fill="rgb(210,80,43)" fg:x="294721374" fg:w="39135068"/><text x="64.0486%" y="623.50">core::option..</text></g><g><title>alloc::fmt::format::_{{closure}} (39,135,068 samples, 8.47%)</title><rect x="63.7986%" y="597" width="8.4716%" height="15" fill="rgb(247,160,36)" fg:x="294721374" fg:w="39135068"/><text x="64.0486%" y="607.50">alloc::fmt::..</text></g><g><title>alloc::fmt::format::format_inner (39,135,068 samples, 8.47%)</title><rect x="63.7986%" y="581" width="8.4716%" height="15" fill="rgb(234,13,49)" fg:x="294721374" fg:w="39135068"/><text x="64.0486%" y="591.50">alloc::fmt::..</text></g><g><title>core::fmt::Write::write_fmt (35,909,434 samples, 7.77%)</title><rect x="64.4969%" y="565" width="7.7734%" height="15" fill="rgb(234,122,0)" fg:x="297947008" fg:w="35909434"/><text x="64.7469%" y="575.50">core::fmt::..</text></g><g><title>&lt;&amp;mut W as core::fmt::Write::write_fmt::SpecWriteFmt&gt;::spec_write_fmt (35,909,434 samples, 7.77%)</title><rect x="64.4969%" y="549" width="7.7734%" height="15" fill="rgb(207,146,38)" fg:x="297947008" fg:w="35909434"/><text x="64.7469%" y="559.50">&lt;&amp;mut W as ..</text></g><g><title>core::fmt::write (35,909,434 samples, 7.77%)</title><rect x="64.4969%" y="533" width="7.7734%" height="15" fill="rgb(207,177,25)" fg:x="297947008" fg:w="35909434"/><text x="64.7469%" y="543.50">core::fmt::..</text></g><g><title>core::fmt::rt::Argument::fmt (35,909,434 samples, 7.77%)</title><rect x="64.4969%" y="517" width="7.7734%" height="15" fill="rgb(211,178,42)" fg:x="297947008" fg:w="35909434"/><text x="64.7469%" y="527.50">core::fmt::..</text></g><g><title>&lt;ratatui::buffer::buffer::Buffer as core::fmt::Debug&gt;::fmt (35,909,434 samples, 7.77%)</title><rect x="64.4969%" y="501" width="7.7734%" height="15" fill="rgb(230,69,54)" fg:x="297947008" fg:w="35909434"/><text x="64.7469%" y="511.50">&lt;ratatui::b..</text></g><g><title>ratatui::buffer::cell::Cell::symbol (4,402,843 samples, 0.95%)</title><rect x="71.3172%" y="485" width="0.9531%" height="15" fill="rgb(214,135,41)" fg:x="329453599" fg:w="4402843"/><text x="71.5672%" y="495.50"></text></g><g><title>compact_str::CompactString::as_str (4,402,843 samples, 0.95%)</title><rect x="71.3172%" y="469" width="0.9531%" height="15" fill="rgb(237,67,25)" fg:x="329453599" fg:w="4402843"/><text x="71.5672%" y="479.50"></text></g><g><title>compact_str::repr::Repr::as_str (4,402,843 samples, 0.95%)</title><rect x="71.3172%" y="453" width="0.9531%" height="15" fill="rgb(222,189,50)" fg:x="329453599" fg:w="4402843"/><text x="71.5672%" y="463.50"></text></g><g><title>compact_str::repr::Repr::as_slice (4,402,843 samples, 0.95%)</title><rect x="71.3172%" y="437" width="0.9531%" height="15" fill="rgb(245,148,34)" fg:x="329453599" fg:w="4402843"/><text x="71.5672%" y="447.50"></text></g><g><title>compact_str::repr::Repr::last_byte (4,402,843 samples, 0.95%)</title><rect x="71.3172%" y="421" width="0.9531%" height="15" fill="rgb(222,29,6)" fg:x="329453599" fg:w="4402843"/><text x="71.5672%" y="431.50"></text></g><g><title>emi_web::tui::frame_to_file (48,947,012 samples, 10.60%)</title><rect x="63.7986%" y="645" width="10.5956%" height="15" fill="rgb(221,189,43)" fg:x="294721374" fg:w="48947012"/><text x="64.0486%" y="655.50">emi_web::tui::f..</text></g><g><title>std::fs::File::create (9,811,944 samples, 2.12%)</title><rect x="72.2702%" y="629" width="2.1240%" height="15" fill="rgb(207,36,27)" fg:x="333856442" fg:w="9811944"/><text x="72.5202%" y="639.50">s..</text></g><g><title>std::fs::OpenOptions::open (9,811,944 samples, 2.12%)</title><rect x="72.2702%" y="613" width="2.1240%" height="15" fill="rgb(217,90,24)" fg:x="333856442" fg:w="9811944"/><text x="72.5202%" y="623.50">s..</text></g><g><title>std::fs::OpenOptions::_open (9,811,944 samples, 2.12%)</title><rect x="72.2702%" y="597" width="2.1240%" height="15" fill="rgb(224,66,35)" fg:x="333856442" fg:w="9811944"/><text x="72.5202%" y="607.50">s..</text></g><g><title>std::sys::pal::unix::fs::File::open (9,811,944 samples, 2.12%)</title><rect x="72.2702%" y="581" width="2.1240%" height="15" fill="rgb(221,13,50)" fg:x="333856442" fg:w="9811944"/><text x="72.5202%" y="591.50">s..</text></g><g><title>std::sys::pal::common::small_c_string::run_path_with_cstr (9,811,944 samples, 2.12%)</title><rect x="72.2702%" y="565" width="2.1240%" height="15" fill="rgb(236,68,49)" fg:x="333856442" fg:w="9811944"/><text x="72.5202%" y="575.50">s..</text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr (9,811,944 samples, 2.12%)</title><rect x="72.2702%" y="549" width="2.1240%" height="15" fill="rgb(229,146,28)" fg:x="333856442" fg:w="9811944"/><text x="72.5202%" y="559.50">s..</text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr_stack (9,811,944 samples, 2.12%)</title><rect x="72.2702%" y="533" width="2.1240%" height="15" fill="rgb(225,31,38)" fg:x="333856442" fg:w="9811944"/><text x="72.5202%" y="543.50">s..</text></g><g><title>std::sys::pal::unix::fs::File::open::_{{closure}} (9,811,944 samples, 2.12%)</title><rect x="72.2702%" y="517" width="2.1240%" height="15" fill="rgb(250,208,3)" fg:x="333856442" fg:w="9811944"/><text x="72.5202%" y="527.50">s..</text></g><g><title>std::sys::pal::unix::fs::File::open_c (9,811,944 samples, 2.12%)</title><rect x="72.2702%" y="501" width="2.1240%" height="15" fill="rgb(246,54,23)" fg:x="333856442" fg:w="9811944"/><text x="72.5202%" y="511.50">s..</text></g><g><title>std::sys::pal::unix::cvt_r (9,811,944 samples, 2.12%)</title><rect x="72.2702%" y="485" width="2.1240%" height="15" fill="rgb(243,76,11)" fg:x="333856442" fg:w="9811944"/><text x="72.5202%" y="495.50">s..</text></g><g><title>std::sys::pal::unix::fs::File::open_c::_{{closure}} (9,811,944 samples, 2.12%)</title><rect x="72.2702%" y="469" width="2.1240%" height="15" fill="rgb(245,21,50)" fg:x="333856442" fg:w="9811944"/><text x="72.5202%" y="479.50">s..</text></g><g><title>open64 (9,811,944 samples, 2.12%)</title><rect x="72.2702%" y="453" width="2.1240%" height="15" fill="rgb(228,9,43)" fg:x="333856442" fg:w="9811944"/><text x="72.5202%" y="463.50">o..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (355,019 samples, 0.08%)</title><rect x="74.3942%" y="517" width="0.0769%" height="15" fill="rgb(208,100,47)" fg:x="343668386" fg:w="355019"/><text x="74.6442%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (355,019 samples, 0.08%)</title><rect x="74.3942%" y="501" width="0.0769%" height="15" fill="rgb(232,26,8)" fg:x="343668386" fg:w="355019"/><text x="74.6442%" y="511.50"></text></g><g><title>hashbrown::map::make_hash (355,019 samples, 0.08%)</title><rect x="74.3942%" y="485" width="0.0769%" height="15" fill="rgb(216,166,38)" fg:x="343668386" fg:w="355019"/><text x="74.6442%" y="495.50"></text></g><g><title>&lt;lru::KeyRef&lt;K&gt; as core::hash::Hash&gt;::hash (355,019 samples, 0.08%)</title><rect x="74.3942%" y="469" width="0.0769%" height="15" fill="rgb(251,202,51)" fg:x="343668386" fg:w="355019"/><text x="74.6442%" y="479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (355,019 samples, 0.08%)</title><rect x="74.3942%" y="453" width="0.0769%" height="15" fill="rgb(254,216,34)" fg:x="343668386" fg:w="355019"/><text x="74.6442%" y="463.50"></text></g><g><title>&lt;ratatui::layout::layout::Layout as core::hash::Hash&gt;::hash (355,019 samples, 0.08%)</title><rect x="74.3942%" y="437" width="0.0769%" height="15" fill="rgb(251,32,27)" fg:x="343668386" fg:w="355019"/><text x="74.6442%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (355,019 samples, 0.08%)</title><rect x="74.3942%" y="421" width="0.0769%" height="15" fill="rgb(208,127,28)" fg:x="343668386" fg:w="355019"/><text x="74.6442%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (355,019 samples, 0.08%)</title><rect x="74.3942%" y="405" width="0.0769%" height="15" fill="rgb(224,137,22)" fg:x="343668386" fg:w="355019"/><text x="74.6442%" y="415.50"></text></g><g><title>core::hash::Hash::hash_slice (355,019 samples, 0.08%)</title><rect x="74.3942%" y="389" width="0.0769%" height="15" fill="rgb(254,70,32)" fg:x="343668386" fg:w="355019"/><text x="74.6442%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (355,019 samples, 0.08%)</title><rect x="74.3942%" y="373" width="0.0769%" height="15" fill="rgb(229,75,37)" fg:x="343668386" fg:w="355019"/><text x="74.6442%" y="383.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (355,019 samples, 0.08%)</title><rect x="74.3942%" y="357" width="0.0769%" height="15" fill="rgb(252,64,23)" fg:x="343668386" fg:w="355019"/><text x="74.6442%" y="367.50"></text></g><g><title>ratatui::layout::layout::configure_flex_constraints (1,619,106 samples, 0.35%)</title><rect x="74.4711%" y="485" width="0.3505%" height="15" fill="rgb(232,162,48)" fg:x="344023405" fg:w="1619106"/><text x="74.7211%" y="495.50"></text></g><g><title>cassowary::solver_impl::Solver::add_constraint (1,619,106 samples, 0.35%)</title><rect x="74.4711%" y="469" width="0.3505%" height="15" fill="rgb(246,160,12)" fg:x="344023405" fg:w="1619106"/><text x="74.7211%" y="479.50"></text></g><g><title>cassowary::solver_impl::Solver::substitute (1,619,106 samples, 0.35%)</title><rect x="74.4711%" y="453" width="0.3505%" height="15" fill="rgb(247,166,0)" fg:x="344023405" fg:w="1619106"/><text x="74.7211%" y="463.50"></text></g><g><title>cassowary::Row::substitute (1,619,106 samples, 0.35%)</title><rect x="74.4711%" y="437" width="0.3505%" height="15" fill="rgb(249,219,21)" fg:x="344023405" fg:w="1619106"/><text x="74.7211%" y="447.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1,619,106 samples, 0.35%)</title><rect x="74.4711%" y="421" width="0.3505%" height="15" fill="rgb(205,209,3)" fg:x="344023405" fg:w="1619106"/><text x="74.7211%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1,619,106 samples, 0.35%)</title><rect x="74.4711%" y="405" width="0.3505%" height="15" fill="rgb(243,44,1)" fg:x="344023405" fg:w="1619106"/><text x="74.7211%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1,619,106 samples, 0.35%)</title><rect x="74.4711%" y="389" width="0.3505%" height="15" fill="rgb(206,159,16)" fg:x="344023405" fg:w="1619106"/><text x="74.7211%" y="399.50"></text></g><g><title>hashbrown::map::make_hash (1,619,106 samples, 0.35%)</title><rect x="74.4711%" y="373" width="0.3505%" height="15" fill="rgb(244,77,30)" fg:x="344023405" fg:w="1619106"/><text x="74.7211%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,619,106 samples, 0.35%)</title><rect x="74.4711%" y="357" width="0.3505%" height="15" fill="rgb(218,69,12)" fg:x="344023405" fg:w="1619106"/><text x="74.7211%" y="367.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1,619,106 samples, 0.35%)</title><rect x="74.4711%" y="341" width="0.3505%" height="15" fill="rgb(212,87,7)" fg:x="344023405" fg:w="1619106"/><text x="74.7211%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1,619,106 samples, 0.35%)</title><rect x="74.4711%" y="325" width="0.3505%" height="15" fill="rgb(245,114,25)" fg:x="344023405" fg:w="1619106"/><text x="74.7211%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1,619,106 samples, 0.35%)</title><rect x="74.4711%" y="309" width="0.3505%" height="15" fill="rgb(210,61,42)" fg:x="344023405" fg:w="1619106"/><text x="74.7211%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1,619,106 samples, 0.35%)</title><rect x="74.4711%" y="293" width="0.3505%" height="15" fill="rgb(211,52,33)" fg:x="344023405" fg:w="1619106"/><text x="74.7211%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,619,106 samples, 0.35%)</title><rect x="74.4711%" y="277" width="0.3505%" height="15" fill="rgb(234,58,33)" fg:x="344023405" fg:w="1619106"/><text x="74.7211%" y="287.50"></text></g><g><title>ratatui::terminal::terminal::Terminal&lt;B&gt;::draw::_{{closure}} (110,409,303 samples, 23.90%)</title><rect x="52.4342%" y="725" width="23.9004%" height="15" fill="rgb(220,115,36)" fg:x="242222752" fg:w="110409303"/><text x="52.6842%" y="735.50">ratatui::terminal::terminal::Terminal&lt;..</text></g><g><title>emi_web::tui::App::run::_{{closure}} (110,409,303 samples, 23.90%)</title><rect x="52.4342%" y="709" width="23.9004%" height="15" fill="rgb(243,153,54)" fg:x="242222752" fg:w="110409303"/><text x="52.6842%" y="719.50">emi_web::tui::App::run::_{{closure}}</text></g><g><title>emi_web::tui::App::draw (110,409,303 samples, 23.90%)</title><rect x="52.4342%" y="693" width="23.9004%" height="15" fill="rgb(251,47,18)" fg:x="242222752" fg:w="110409303"/><text x="52.6842%" y="703.50">emi_web::tui::App::draw</text></g><g><title>ratatui::terminal::frame::Frame::render_widget (110,409,303 samples, 23.90%)</title><rect x="52.4342%" y="677" width="23.9004%" height="15" fill="rgb(242,102,42)" fg:x="242222752" fg:w="110409303"/><text x="52.6842%" y="687.50">ratatui::terminal::frame::Frame::rende..</text></g><g><title>&lt;&amp;emi_web::tui::App as ratatui::widgets::Widget&gt;::render (110,409,303 samples, 23.90%)</title><rect x="52.4342%" y="661" width="23.9004%" height="15" fill="rgb(234,31,38)" fg:x="242222752" fg:w="110409303"/><text x="52.6842%" y="671.50">&lt;&amp;emi_web::tui::App as ratatui::widget..</text></g><g><title>ratatui::layout::layout::Layout::split (8,963,669 samples, 1.94%)</title><rect x="74.3942%" y="645" width="1.9404%" height="15" fill="rgb(221,117,51)" fg:x="343668386" fg:w="8963669"/><text x="74.6442%" y="655.50">r..</text></g><g><title>ratatui::layout::layout::Layout::split_with_spacers (8,963,669 samples, 1.94%)</title><rect x="74.3942%" y="629" width="1.9404%" height="15" fill="rgb(212,20,18)" fg:x="343668386" fg:w="8963669"/><text x="74.6442%" y="639.50">r..</text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut (8,963,669 samples, 1.94%)</title><rect x="74.3942%" y="613" width="1.9404%" height="15" fill="rgb(245,133,36)" fg:x="343668386" fg:w="8963669"/><text x="74.6442%" y="623.50">s..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (8,963,669 samples, 1.94%)</title><rect x="74.3942%" y="597" width="1.9404%" height="15" fill="rgb(212,6,19)" fg:x="343668386" fg:w="8963669"/><text x="74.6442%" y="607.50">s..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (8,963,669 samples, 1.94%)</title><rect x="74.3942%" y="581" width="1.9404%" height="15" fill="rgb(218,1,36)" fg:x="343668386" fg:w="8963669"/><text x="74.6442%" y="591.50">s..</text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut::_{{closure}} (8,963,669 samples, 1.94%)</title><rect x="74.3942%" y="565" width="1.9404%" height="15" fill="rgb(246,84,54)" fg:x="343668386" fg:w="8963669"/><text x="74.6442%" y="575.50">s..</text></g><g><title>ratatui::layout::layout::Layout::split_with_spacers::_{{closure}} (8,963,669 samples, 1.94%)</title><rect x="74.3942%" y="549" width="1.9404%" height="15" fill="rgb(242,110,6)" fg:x="343668386" fg:w="8963669"/><text x="74.6442%" y="559.50">r..</text></g><g><title>lru::LruCache&lt;K,V,S&gt;::get_or_insert (8,963,669 samples, 1.94%)</title><rect x="74.3942%" y="533" width="1.9404%" height="15" fill="rgb(214,47,5)" fg:x="343668386" fg:w="8963669"/><text x="74.6442%" y="543.50">l..</text></g><g><title>ratatui::layout::layout::Layout::split_with_spacers::_{{closure}}::_{{closure}} (8,608,650 samples, 1.86%)</title><rect x="74.4711%" y="517" width="1.8635%" height="15" fill="rgb(218,159,25)" fg:x="344023405" fg:w="8608650"/><text x="74.7211%" y="527.50">r..</text></g><g><title>ratatui::layout::layout::Layout::try_split (8,608,650 samples, 1.86%)</title><rect x="74.4711%" y="501" width="1.8635%" height="15" fill="rgb(215,211,28)" fg:x="344023405" fg:w="8608650"/><text x="74.7211%" y="511.50">r..</text></g><g><title>ratatui::layout::layout::configure_variable_constraints (6,989,544 samples, 1.51%)</title><rect x="74.8216%" y="485" width="1.5130%" height="15" fill="rgb(238,59,32)" fg:x="345642511" fg:w="6989544"/><text x="75.0716%" y="495.50"></text></g><g><title>cassowary::solver_impl::Solver::add_constraint (6,989,544 samples, 1.51%)</title><rect x="74.8216%" y="469" width="1.5130%" height="15" fill="rgb(226,82,3)" fg:x="345642511" fg:w="6989544"/><text x="75.0716%" y="479.50"></text></g><g><title>cassowary::solver_impl::Solver::add_with_artificial_variable (6,989,544 samples, 1.51%)</title><rect x="74.8216%" y="453" width="1.5130%" height="15" fill="rgb(240,164,32)" fg:x="345642511" fg:w="6989544"/><text x="75.0716%" y="463.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (6,989,544 samples, 1.51%)</title><rect x="74.8216%" y="437" width="1.5130%" height="15" fill="rgb(232,46,7)" fg:x="345642511" fg:w="6989544"/><text x="75.0716%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (6,989,544 samples, 1.51%)</title><rect x="74.8216%" y="421" width="1.5130%" height="15" fill="rgb(229,129,53)" fg:x="345642511" fg:w="6989544"/><text x="75.0716%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (6,989,544 samples, 1.51%)</title><rect x="74.8216%" y="405" width="1.5130%" height="15" fill="rgb(234,188,29)" fg:x="345642511" fg:w="6989544"/><text x="75.0716%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (6,989,544 samples, 1.51%)</title><rect x="74.8216%" y="389" width="1.5130%" height="15" fill="rgb(246,141,4)" fg:x="345642511" fg:w="6989544"/><text x="75.0716%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (6,989,544 samples, 1.51%)</title><rect x="74.8216%" y="373" width="1.5130%" height="15" fill="rgb(229,23,39)" fg:x="345642511" fg:w="6989544"/><text x="75.0716%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (6,989,544 samples, 1.51%)</title><rect x="74.8216%" y="357" width="1.5130%" height="15" fill="rgb(206,12,3)" fg:x="345642511" fg:w="6989544"/><text x="75.0716%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (6,989,544 samples, 1.51%)</title><rect x="74.8216%" y="341" width="1.5130%" height="15" fill="rgb(252,226,20)" fg:x="345642511" fg:w="6989544"/><text x="75.0716%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (6,989,544 samples, 1.51%)</title><rect x="74.8216%" y="325" width="1.5130%" height="15" fill="rgb(216,123,35)" fg:x="345642511" fg:w="6989544"/><text x="75.0716%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (6,989,544 samples, 1.51%)</title><rect x="74.8216%" y="309" width="1.5130%" height="15" fill="rgb(212,68,40)" fg:x="345642511" fg:w="6989544"/><text x="75.0716%" y="319.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (6,989,544 samples, 1.51%)</title><rect x="74.8216%" y="293" width="1.5130%" height="15" fill="rgb(254,125,32)" fg:x="345642511" fg:w="6989544"/><text x="75.0716%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (6,989,544 samples, 1.51%)</title><rect x="74.8216%" y="277" width="1.5130%" height="15" fill="rgb(253,97,22)" fg:x="345642511" fg:w="6989544"/><text x="75.0716%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6,989,544 samples, 1.51%)</title><rect x="74.8216%" y="261" width="1.5130%" height="15" fill="rgb(241,101,14)" fg:x="345642511" fg:w="6989544"/><text x="75.0716%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (6,989,544 samples, 1.51%)</title><rect x="74.8216%" y="245" width="1.5130%" height="15" fill="rgb(238,103,29)" fg:x="345642511" fg:w="6989544"/><text x="75.0716%" y="255.50"></text></g><g><title>&lt;cassowary::Symbol as core::hash::Hash&gt;::hash (6,989,544 samples, 1.51%)</title><rect x="74.8216%" y="229" width="1.5130%" height="15" fill="rgb(233,195,47)" fg:x="345642511" fg:w="6989544"/><text x="75.0716%" y="239.50"></text></g><g><title>&lt;cassowary::SymbolType as core::hash::Hash&gt;::hash (6,989,544 samples, 1.51%)</title><rect x="74.8216%" y="213" width="1.5130%" height="15" fill="rgb(246,218,30)" fg:x="345642511" fg:w="6989544"/><text x="75.0716%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (6,989,544 samples, 1.51%)</title><rect x="74.8216%" y="197" width="1.5130%" height="15" fill="rgb(219,145,47)" fg:x="345642511" fg:w="6989544"/><text x="75.0716%" y="207.50"></text></g><g><title>core::hash::Hasher::write_isize (6,989,544 samples, 1.51%)</title><rect x="74.8216%" y="181" width="1.5130%" height="15" fill="rgb(243,12,26)" fg:x="345642511" fg:w="6989544"/><text x="75.0716%" y="191.50"></text></g><g><title>core::hash::Hasher::write_usize (6,989,544 samples, 1.51%)</title><rect x="74.8216%" y="165" width="1.5130%" height="15" fill="rgb(214,87,16)" fg:x="345642511" fg:w="6989544"/><text x="75.0716%" y="175.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (6,989,544 samples, 1.51%)</title><rect x="74.8216%" y="149" width="1.5130%" height="15" fill="rgb(208,99,42)" fg:x="345642511" fg:w="6989544"/><text x="75.0716%" y="159.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6,989,544 samples, 1.51%)</title><rect x="74.8216%" y="133" width="1.5130%" height="15" fill="rgb(253,99,2)" fg:x="345642511" fg:w="6989544"/><text x="75.0716%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6,989,544 samples, 1.51%)</title><rect x="74.8216%" y="117" width="1.5130%" height="15" fill="rgb(220,168,23)" fg:x="345642511" fg:w="6989544"/><text x="75.0716%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (6,989,544 samples, 1.51%)</title><rect x="74.8216%" y="101" width="1.5130%" height="15" fill="rgb(242,38,24)" fg:x="345642511" fg:w="6989544"/><text x="75.0716%" y="111.50"></text></g><g><title>&lt;str as unicode_width::UnicodeWidthStr&gt;::width (15,027,743 samples, 3.25%)</title><rect x="77.8434%" y="693" width="3.2531%" height="15" fill="rgb(225,182,9)" fg:x="359601820" fg:w="15027743"/><text x="78.0934%" y="703.50">&lt;st..</text></g><g><title>unicode_width::tables::str_width (15,027,743 samples, 3.25%)</title><rect x="77.8434%" y="677" width="3.2531%" height="15" fill="rgb(243,178,37)" fg:x="359601820" fg:w="15027743"/><text x="78.0934%" y="687.50">uni..</text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::rfold (15,027,743 samples, 3.25%)</title><rect x="77.8434%" y="661" width="3.2531%" height="15" fill="rgb(232,139,19)" fg:x="359601820" fg:w="15027743"/><text x="78.0934%" y="671.50">cor..</text></g><g><title>unicode_width::tables::str_width::_{{closure}} (15,027,743 samples, 3.25%)</title><rect x="77.8434%" y="645" width="3.2531%" height="15" fill="rgb(225,201,24)" fg:x="359601820" fg:w="15027743"/><text x="78.0934%" y="655.50">uni..</text></g><g><title>unicode_width::tables::width_in_str (15,027,743 samples, 3.25%)</title><rect x="77.8434%" y="629" width="3.2531%" height="15" fill="rgb(221,47,46)" fg:x="359601820" fg:w="15027743"/><text x="78.0934%" y="639.50">uni..</text></g><g><title>&lt;compact_str::CompactString as core::convert::AsRef&lt;str&gt;&gt;::as_ref (5,559,697 samples, 1.20%)</title><rect x="81.7947%" y="629" width="1.2035%" height="15" fill="rgb(249,23,13)" fg:x="377855197" fg:w="5559697"/><text x="82.0447%" y="639.50"></text></g><g><title>compact_str::CompactString::as_str (5,559,697 samples, 1.20%)</title><rect x="81.7947%" y="613" width="1.2035%" height="15" fill="rgb(219,9,5)" fg:x="377855197" fg:w="5559697"/><text x="82.0447%" y="623.50"></text></g><g><title>compact_str::repr::Repr::as_str (5,559,697 samples, 1.20%)</title><rect x="81.7947%" y="597" width="1.2035%" height="15" fill="rgb(254,171,16)" fg:x="377855197" fg:w="5559697"/><text x="82.0447%" y="607.50"></text></g><g><title>compact_str::repr::Repr::as_slice (5,559,697 samples, 1.20%)</title><rect x="81.7947%" y="581" width="1.2035%" height="15" fill="rgb(230,171,20)" fg:x="377855197" fg:w="5559697"/><text x="82.0447%" y="591.50"></text></g><g><title>core::cmp::min (5,559,697 samples, 1.20%)</title><rect x="81.7947%" y="565" width="1.2035%" height="15" fill="rgb(210,71,41)" fg:x="377855197" fg:w="5559697"/><text x="82.0447%" y="575.50"></text></g><g><title>core::cmp::Ord::min (5,559,697 samples, 1.20%)</title><rect x="81.7947%" y="549" width="1.2035%" height="15" fill="rgb(206,173,20)" fg:x="377855197" fg:w="5559697"/><text x="82.0447%" y="559.50"></text></g><g><title>core::cmp::min_by (5,559,697 samples, 1.20%)</title><rect x="81.7947%" y="533" width="1.2035%" height="15" fill="rgb(233,88,34)" fg:x="377855197" fg:w="5559697"/><text x="82.0447%" y="543.50"></text></g><g><title>&lt;compact_str::CompactString as core::cmp::PartialEq&lt;T&gt;&gt;::eq (10,768,035 samples, 2.33%)</title><rect x="81.7947%" y="645" width="2.3310%" height="15" fill="rgb(223,209,46)" fg:x="377855197" fg:w="10768035"/><text x="82.0447%" y="655.50">&lt;..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (5,208,338 samples, 1.13%)</title><rect x="82.9982%" y="629" width="1.1275%" height="15" fill="rgb(250,43,18)" fg:x="383414894" fg:w="5208338"/><text x="83.2482%" y="639.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (5,208,338 samples, 1.13%)</title><rect x="82.9982%" y="613" width="1.1275%" height="15" fill="rgb(208,13,10)" fg:x="383414894" fg:w="5208338"/><text x="83.2482%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (5,208,338 samples, 1.13%)</title><rect x="82.9982%" y="597" width="1.1275%" height="15" fill="rgb(212,200,36)" fg:x="383414894" fg:w="5208338"/><text x="83.2482%" y="607.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (5,208,338 samples, 1.13%)</title><rect x="82.9982%" y="581" width="1.1275%" height="15" fill="rgb(225,90,30)" fg:x="383414894" fg:w="5208338"/><text x="83.2482%" y="591.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (5,208,338 samples, 1.13%)</title><rect x="82.9982%" y="565" width="1.1275%" height="15" fill="rgb(236,182,39)" fg:x="383414894" fg:w="5208338"/><text x="83.2482%" y="575.50"></text></g><g><title>[libc.so.6] (5,208,338 samples, 1.13%)</title><rect x="82.9982%" y="549" width="1.1275%" height="15" fill="rgb(212,144,35)" fg:x="383414894" fg:w="5208338"/><text x="83.2482%" y="559.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::ne (19,202,007 samples, 4.16%)</title><rect x="81.0964%" y="693" width="4.1567%" height="15" fill="rgb(228,63,44)" fg:x="374629563" fg:w="19202007"/><text x="81.3464%" y="703.50">core:..</text></g><g><title>core::cmp::PartialEq::ne (19,202,007 samples, 4.16%)</title><rect x="81.0964%" y="677" width="4.1567%" height="15" fill="rgb(228,109,6)" fg:x="374629563" fg:w="19202007"/><text x="81.3464%" y="687.50">core:..</text></g><g><title>&lt;ratatui::buffer::cell::Cell as core::cmp::PartialEq&gt;::eq (19,202,007 samples, 4.16%)</title><rect x="81.0964%" y="661" width="4.1567%" height="15" fill="rgb(238,117,24)" fg:x="374629563" fg:w="19202007"/><text x="81.3464%" y="671.50">&lt;rata..</text></g><g><title>&lt;ratatui::style::color::Color as core::cmp::PartialEq&gt;::eq (5,208,338 samples, 1.13%)</title><rect x="84.1257%" y="645" width="1.1275%" height="15" fill="rgb(242,26,26)" fg:x="388623232" fg:w="5208338"/><text x="84.3757%" y="655.50"></text></g><g><title>ratatui::terminal::terminal::Terminal&lt;B&gt;::flush (59,533,683 samples, 12.89%)</title><rect x="76.3346%" y="725" width="12.8873%" height="15" fill="rgb(221,92,48)" fg:x="352632055" fg:w="59533683"/><text x="76.5846%" y="735.50">ratatui::terminal::..</text></g><g><title>ratatui::buffer::buffer::Buffer::diff (59,533,683 samples, 12.89%)</title><rect x="76.3346%" y="709" width="12.8873%" height="15" fill="rgb(209,209,32)" fg:x="352632055" fg:w="59533683"/><text x="76.5846%" y="719.50">ratatui::buffer::bu..</text></g><g><title>ratatui::buffer::cell::Cell::symbol (18,334,168 samples, 3.97%)</title><rect x="85.2531%" y="693" width="3.9688%" height="15" fill="rgb(221,70,22)" fg:x="393831570" fg:w="18334168"/><text x="85.5031%" y="703.50">rata..</text></g><g><title>compact_str::CompactString::as_str (18,334,168 samples, 3.97%)</title><rect x="85.2531%" y="677" width="3.9688%" height="15" fill="rgb(248,145,5)" fg:x="393831570" fg:w="18334168"/><text x="85.5031%" y="687.50">comp..</text></g><g><title>compact_str::repr::Repr::as_str (18,334,168 samples, 3.97%)</title><rect x="85.2531%" y="661" width="3.9688%" height="15" fill="rgb(226,116,26)" fg:x="393831570" fg:w="18334168"/><text x="85.5031%" y="671.50">comp..</text></g><g><title>compact_str::repr::Repr::as_slice (18,334,168 samples, 3.97%)</title><rect x="85.2531%" y="645" width="3.9688%" height="15" fill="rgb(244,5,17)" fg:x="393831570" fg:w="18334168"/><text x="85.5031%" y="655.50">comp..</text></g><g><title>core::cmp::min (18,334,168 samples, 3.97%)</title><rect x="85.2531%" y="629" width="3.9688%" height="15" fill="rgb(252,159,33)" fg:x="393831570" fg:w="18334168"/><text x="85.5031%" y="639.50">core..</text></g><g><title>core::cmp::Ord::min (18,334,168 samples, 3.97%)</title><rect x="85.2531%" y="613" width="3.9688%" height="15" fill="rgb(206,71,0)" fg:x="393831570" fg:w="18334168"/><text x="85.5031%" y="623.50">core..</text></g><g><title>core::cmp::min_by (18,334,168 samples, 3.97%)</title><rect x="85.2531%" y="597" width="3.9688%" height="15" fill="rgb(233,118,54)" fg:x="393831570" fg:w="18334168"/><text x="85.5031%" y="607.50">core..</text></g><g><title>ratatui::terminal::terminal::Terminal&lt;B&gt;::draw (173,949,265 samples, 37.65%)</title><rect x="52.4342%" y="757" width="37.6550%" height="15" fill="rgb(234,83,48)" fg:x="242222752" fg:w="173949265"/><text x="52.6842%" y="767.50">ratatui::terminal::terminal::Terminal&lt;B&gt;::draw</text></g><g><title>ratatui::terminal::terminal::Terminal&lt;B&gt;::try_draw (173,949,265 samples, 37.65%)</title><rect x="52.4342%" y="741" width="37.6550%" height="15" fill="rgb(228,3,54)" fg:x="242222752" fg:w="173949265"/><text x="52.6842%" y="751.50">ratatui::terminal::terminal::Terminal&lt;B&gt;::try_draw</text></g><g><title>ratatui::terminal::terminal::Terminal&lt;B&gt;::swap_buffers (4,006,279 samples, 0.87%)</title><rect x="89.2219%" y="725" width="0.8672%" height="15" fill="rgb(226,155,13)" fg:x="412165738" fg:w="4006279"/><text x="89.4719%" y="735.50"></text></g><g><title>ratatui::buffer::buffer::Buffer::reset (4,006,279 samples, 0.87%)</title><rect x="89.2219%" y="709" width="0.8672%" height="15" fill="rgb(241,28,37)" fg:x="412165738" fg:w="4006279"/><text x="89.4719%" y="719.50"></text></g><g><title>ratatui::buffer::cell::Cell::reset (4,006,279 samples, 0.87%)</title><rect x="89.2219%" y="693" width="0.8672%" height="15" fill="rgb(233,93,10)" fg:x="412165738" fg:w="4006279"/><text x="89.4719%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;compact_str::CompactString&gt; (4,006,279 samples, 0.87%)</title><rect x="89.2219%" y="677" width="0.8672%" height="15" fill="rgb(225,113,19)" fg:x="412165738" fg:w="4006279"/><text x="89.4719%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;compact_str::repr::Repr&gt; (4,006,279 samples, 0.87%)</title><rect x="89.2219%" y="661" width="0.8672%" height="15" fill="rgb(241,2,18)" fg:x="412165738" fg:w="4006279"/><text x="89.4719%" y="671.50"></text></g><g><title>&lt;compact_str::repr::Repr as core::ops::drop::Drop&gt;::drop (4,006,279 samples, 0.87%)</title><rect x="89.2219%" y="645" width="0.8672%" height="15" fill="rgb(228,207,21)" fg:x="412165738" fg:w="4006279"/><text x="89.4719%" y="655.50"></text></g><g><title>compact_str::repr::Repr::is_heap_allocated (4,006,279 samples, 0.87%)</title><rect x="89.2219%" y="629" width="0.8672%" height="15" fill="rgb(213,211,35)" fg:x="412165738" fg:w="4006279"/><text x="89.4719%" y="639.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (356,553,282 samples, 77.18%)</title><rect x="12.9174%" y="933" width="77.1835%" height="15" fill="rgb(209,83,10)" fg:x="59672445" fg:w="356553282"/><text x="13.1674%" y="943.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (177,228,609 samples, 38.36%)</title><rect x="51.7359%" y="917" width="38.3649%" height="15" fill="rgb(209,164,1)" fg:x="238997118" fg:w="177228609"/><text x="51.9859%" y="927.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::panic::catch_unwind (177,228,609 samples, 38.36%)</title><rect x="51.7359%" y="901" width="38.3649%" height="15" fill="rgb(213,184,43)" fg:x="238997118" fg:w="177228609"/><text x="51.9859%" y="911.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (177,228,609 samples, 38.36%)</title><rect x="51.7359%" y="885" width="38.3649%" height="15" fill="rgb(231,61,34)" fg:x="238997118" fg:w="177228609"/><text x="51.9859%" y="895.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (177,228,609 samples, 38.36%)</title><rect x="51.7359%" y="869" width="38.3649%" height="15" fill="rgb(235,75,3)" fg:x="238997118" fg:w="177228609"/><text x="51.9859%" y="879.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (177,228,609 samples, 38.36%)</title><rect x="51.7359%" y="853" width="38.3649%" height="15" fill="rgb(220,106,47)" fg:x="238997118" fg:w="177228609"/><text x="51.9859%" y="863.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::fu..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (177,228,609 samples, 38.36%)</title><rect x="51.7359%" y="837" width="38.3649%" height="15" fill="rgb(210,196,33)" fg:x="238997118" fg:w="177228609"/><text x="51.9859%" y="847.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closur..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (177,228,609 samples, 38.36%)</title><rect x="51.7359%" y="821" width="38.3649%" height="15" fill="rgb(229,154,42)" fg:x="238997118" fg:w="177228609"/><text x="51.9859%" y="831.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>emi_web::init_and_stream_tui::_{{closure}}::_{{closure}} (177,228,609 samples, 38.36%)</title><rect x="51.7359%" y="805" width="38.3649%" height="15" fill="rgb(228,114,26)" fg:x="238997118" fg:w="177228609"/><text x="51.9859%" y="815.50">emi_web::init_and_stream_tui::_{{closure}}::_{{closure}}</text></g><g><title>emi_web::tui::tui_init (177,228,609 samples, 38.36%)</title><rect x="51.7359%" y="789" width="38.3649%" height="15" fill="rgb(208,144,1)" fg:x="238997118" fg:w="177228609"/><text x="51.9859%" y="799.50">emi_web::tui::tui_init</text></g><g><title>emi_web::tui::App::run (177,228,609 samples, 38.36%)</title><rect x="51.7359%" y="773" width="38.3649%" height="15" fill="rgb(239,112,37)" fg:x="238997118" fg:w="177228609"/><text x="51.9859%" y="783.50">emi_web::tui::App::run</text></g><g><title>std::thread::sleep (53,710 samples, 0.01%)</title><rect x="90.0892%" y="757" width="0.0116%" height="15" fill="rgb(210,96,50)" fg:x="416172017" fg:w="53710"/><text x="90.3392%" y="767.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::sleep (53,710 samples, 0.01%)</title><rect x="90.0892%" y="741" width="0.0116%" height="15" fill="rgb(222,178,2)" fg:x="416172017" fg:w="53710"/><text x="90.3392%" y="751.50"></text></g><g><title>__nanosleep (53,710 samples, 0.01%)</title><rect x="90.0892%" y="725" width="0.0116%" height="15" fill="rgb(226,74,18)" fg:x="416172017" fg:w="53710"/><text x="90.3392%" y="735.50"></text></g><g><title>clock_nanosleep (53,710 samples, 0.01%)</title><rect x="90.0892%" y="709" width="0.0116%" height="15" fill="rgb(225,67,54)" fg:x="416172017" fg:w="53710"/><text x="90.3392%" y="719.50"></text></g><g><title>malloc (617,524 samples, 0.13%)</title><rect x="90.1008%" y="901" width="0.1337%" height="15" fill="rgb(251,92,32)" fg:x="416225727" fg:w="617524"/><text x="90.3508%" y="911.50"></text></g><g><title>[libc.so.6] (617,524 samples, 0.13%)</title><rect x="90.1008%" y="885" width="0.1337%" height="15" fill="rgb(228,149,22)" fg:x="416225727" fg:w="617524"/><text x="90.3508%" y="895.50"></text></g><g><title>[libc.so.6] (617,524 samples, 0.13%)</title><rect x="90.1008%" y="869" width="0.1337%" height="15" fill="rgb(243,54,13)" fg:x="416225727" fg:w="617524"/><text x="90.3508%" y="879.50"></text></g><g><title>[libc.so.6] (358,107,329 samples, 77.52%)</title><rect x="12.9129%" y="981" width="77.5199%" height="15" fill="rgb(243,180,28)" fg:x="59651674" fg:w="358107329"/><text x="13.1629%" y="991.50">[libc.so.6]</text></g><g><title>[libc.so.6] (358,106,688 samples, 77.52%)</title><rect x="12.9130%" y="965" width="77.5197%" height="15" fill="rgb(208,167,24)" fg:x="59652315" fg:w="358106688"/><text x="13.1630%" y="975.50">[libc.so.6]</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (358,086,558 samples, 77.52%)</title><rect x="12.9174%" y="949" width="77.5154%" height="15" fill="rgb(245,73,45)" fg:x="59672445" fg:w="358086558"/><text x="13.1674%" y="959.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (1,533,276 samples, 0.33%)</title><rect x="90.1008%" y="933" width="0.3319%" height="15" fill="rgb(237,203,48)" fg:x="416225727" fg:w="1533276"/><text x="90.3508%" y="943.50"></text></g><g><title>pthread_getattr_np (1,533,276 samples, 0.33%)</title><rect x="90.1008%" y="917" width="0.3319%" height="15" fill="rgb(211,197,16)" fg:x="416225727" fg:w="1533276"/><text x="90.3508%" y="927.50"></text></g><g><title>pthread_attr_setaffinity_np (915,752 samples, 0.20%)</title><rect x="90.2345%" y="901" width="0.1982%" height="15" fill="rgb(243,99,51)" fg:x="416843251" fg:w="915752"/><text x="90.4845%" y="911.50"></text></g><g><title>malloc (915,752 samples, 0.20%)</title><rect x="90.2345%" y="885" width="0.1982%" height="15" fill="rgb(215,123,29)" fg:x="416843251" fg:w="915752"/><text x="90.4845%" y="895.50"></text></g><g><title>&lt;regex_automata::util::prefilter::memmem::Memmem as regex_automata::util::prefilter::PrefilterI&gt;::find (1,609,620 samples, 0.35%)</title><rect x="90.4327%" y="965" width="0.3484%" height="15" fill="rgb(239,186,37)" fg:x="417759003" fg:w="1609620"/><text x="90.6827%" y="975.50"></text></g><g><title>anon.ea87d89d9a69e586d2b37dd96d333840.75.llvm.4925447451965003558 (1,495,555 samples, 0.32%)</title><rect x="90.7812%" y="965" width="0.3237%" height="15" fill="rgb(252,136,39)" fg:x="419368623" fg:w="1495555"/><text x="91.0312%" y="975.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (1,495,555 samples, 0.32%)</title><rect x="90.7812%" y="949" width="0.3237%" height="15" fill="rgb(223,213,32)" fg:x="419368623" fg:w="1495555"/><text x="91.0312%" y="959.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::rfold (3,607,691 samples, 0.78%)</title><rect x="91.1049%" y="965" width="0.7810%" height="15" fill="rgb(233,115,5)" fg:x="420864178" fg:w="3607691"/><text x="91.3549%" y="975.50"></text></g><g><title>ratatui::buffer::buffer::Buffer::index_of (5,733,492 samples, 1.24%)</title><rect x="91.8859%" y="965" width="1.2411%" height="15" fill="rgb(207,226,44)" fg:x="424471869" fg:w="5733492"/><text x="92.1359%" y="975.50"></text></g><g><title>tokio::runtime::context::with_scheduler (1,451,196 samples, 0.31%)</title><rect x="93.1270%" y="965" width="0.3141%" height="15" fill="rgb(208,126,0)" fg:x="430205361" fg:w="1451196"/><text x="93.3770%" y="975.50"></text></g><g><title>[unknown] (15,223,402 samples, 3.30%)</title><rect x="90.4327%" y="981" width="3.2954%" height="15" fill="rgb(244,66,21)" fg:x="417759003" fg:w="15223402"/><text x="90.6827%" y="991.50">[un..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (1,325,848 samples, 0.29%)</title><rect x="93.4411%" y="965" width="0.2870%" height="15" fill="rgb(222,97,12)" fg:x="431656557" fg:w="1325848"/><text x="93.6911%" y="975.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::stats::Stats::end_processing_scheduled_tasks (1,325,848 samples, 0.29%)</title><rect x="93.4411%" y="949" width="0.2870%" height="15" fill="rgb(219,213,19)" fg:x="431656557" fg:w="1325848"/><text x="93.6911%" y="959.50"></text></g><g><title>anon.ea87d89d9a69e586d2b37dd96d333840.75.llvm.4925447451965003558 (1,704,375 samples, 0.37%)</title><rect x="93.7281%" y="981" width="0.3689%" height="15" fill="rgb(252,169,30)" fg:x="432982405" fg:w="1704375"/><text x="93.9781%" y="991.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (1,704,375 samples, 0.37%)</title><rect x="93.7281%" y="965" width="0.3689%" height="15" fill="rgb(206,32,51)" fg:x="432982405" fg:w="1704375"/><text x="93.9781%" y="975.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::rfold (12,338,492 samples, 2.67%)</title><rect x="94.0971%" y="981" width="2.6709%" height="15" fill="rgb(250,172,42)" fg:x="434686780" fg:w="12338492"/><text x="94.3471%" y="991.50">co..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (12,338,492 samples, 2.67%)</title><rect x="94.0971%" y="965" width="2.6709%" height="15" fill="rgb(209,34,43)" fg:x="434686780" fg:w="12338492"/><text x="94.3471%" y="975.50">&lt;c..</text></g><g><title>core::str::validations::next_code_point_reverse (12,338,492 samples, 2.67%)</title><rect x="94.0971%" y="949" width="2.6709%" height="15" fill="rgb(223,11,35)" fg:x="434686780" fg:w="12338492"/><text x="94.3471%" y="959.50">co..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (12,338,492 samples, 2.67%)</title><rect x="94.0971%" y="933" width="2.6709%" height="15" fill="rgb(251,219,26)" fg:x="434686780" fg:w="12338492"/><text x="94.3471%" y="943.50">&lt;c..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (12,338,492 samples, 2.67%)</title><rect x="94.0971%" y="917" width="2.6709%" height="15" fill="rgb(231,119,3)" fg:x="434686780" fg:w="12338492"/><text x="94.3471%" y="927.50">&lt;c..</text></g><g><title>emi_web::parse_frame::Buffer::from_string (1,479,272 samples, 0.32%)</title><rect x="96.7680%" y="981" width="0.3202%" height="15" fill="rgb(216,97,11)" fg:x="447025272" fg:w="1479272"/><text x="97.0180%" y="991.50"></text></g><g><title>regex::regex::string::Regex::new (1,679,546 samples, 0.36%)</title><rect x="97.0882%" y="981" width="0.3636%" height="15" fill="rgb(223,59,9)" fg:x="448504544" fg:w="1679546"/><text x="97.3382%" y="991.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (1,679,546 samples, 0.36%)</title><rect x="97.0882%" y="965" width="0.3636%" height="15" fill="rgb(233,93,31)" fg:x="448504544" fg:w="1679546"/><text x="97.3382%" y="975.50"></text></g><g><title>regex::builders::Builder::build_one_string (1,679,546 samples, 0.36%)</title><rect x="97.0882%" y="949" width="0.3636%" height="15" fill="rgb(239,81,33)" fg:x="448504544" fg:w="1679546"/><text x="97.3382%" y="959.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (1,679,546 samples, 0.36%)</title><rect x="97.0882%" y="933" width="0.3636%" height="15" fill="rgb(213,120,34)" fg:x="448504544" fg:w="1679546"/><text x="97.3382%" y="943.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (1,679,546 samples, 0.36%)</title><rect x="97.0882%" y="917" width="0.3636%" height="15" fill="rgb(243,49,53)" fg:x="448504544" fg:w="1679546"/><text x="97.3382%" y="927.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (1,679,546 samples, 0.36%)</title><rect x="97.0882%" y="901" width="0.3636%" height="15" fill="rgb(247,216,33)" fg:x="448504544" fg:w="1679546"/><text x="97.3382%" y="911.50"></text></g><g><title>regex_automata::meta::strategy::new (1,679,546 samples, 0.36%)</title><rect x="97.0882%" y="885" width="0.3636%" height="15" fill="rgb(226,26,14)" fg:x="448504544" fg:w="1679546"/><text x="97.3382%" y="895.50"></text></g><g><title>regex_automata::meta::strategy::Core::new (1,679,546 samples, 0.36%)</title><rect x="97.0882%" y="869" width="0.3636%" height="15" fill="rgb(215,49,53)" fg:x="448504544" fg:w="1679546"/><text x="97.3382%" y="879.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (1,679,546 samples, 0.36%)</title><rect x="97.0882%" y="853" width="0.3636%" height="15" fill="rgb(245,162,40)" fg:x="448504544" fg:w="1679546"/><text x="97.3382%" y="863.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (1,679,546 samples, 0.36%)</title><rect x="97.0882%" y="837" width="0.3636%" height="15" fill="rgb(229,68,17)" fg:x="448504544" fg:w="1679546"/><text x="97.3382%" y="847.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (1,679,546 samples, 0.36%)</title><rect x="97.0882%" y="821" width="0.3636%" height="15" fill="rgb(213,182,10)" fg:x="448504544" fg:w="1679546"/><text x="97.3382%" y="831.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,679,546 samples, 0.36%)</title><rect x="97.0882%" y="805" width="0.3636%" height="15" fill="rgb(245,125,30)" fg:x="448504544" fg:w="1679546"/><text x="97.3382%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,679,546 samples, 0.36%)</title><rect x="97.0882%" y="789" width="0.3636%" height="15" fill="rgb(232,202,2)" fg:x="448504544" fg:w="1679546"/><text x="97.3382%" y="799.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,679,546 samples, 0.36%)</title><rect x="97.0882%" y="773" width="0.3636%" height="15" fill="rgb(237,140,51)" fg:x="448504544" fg:w="1679546"/><text x="97.3382%" y="783.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile::_{{closure}} (1,679,546 samples, 0.36%)</title><rect x="97.0882%" y="757" width="0.3636%" height="15" fill="rgb(236,157,25)" fg:x="448504544" fg:w="1679546"/><text x="97.3382%" y="767.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1,679,546 samples, 0.36%)</title><rect x="97.0882%" y="741" width="0.3636%" height="15" fill="rgb(219,209,0)" fg:x="448504544" fg:w="1679546"/><text x="97.3382%" y="751.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1,679,546 samples, 0.36%)</title><rect x="97.0882%" y="725" width="0.3636%" height="15" fill="rgb(240,116,54)" fg:x="448504544" fg:w="1679546"/><text x="97.3382%" y="735.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (1,679,546 samples, 0.36%)</title><rect x="97.0882%" y="709" width="0.3636%" height="15" fill="rgb(216,10,36)" fg:x="448504544" fg:w="1679546"/><text x="97.3382%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (1,679,546 samples, 0.36%)</title><rect x="97.0882%" y="693" width="0.3636%" height="15" fill="rgb(222,72,44)" fg:x="448504544" fg:w="1679546"/><text x="97.3382%" y="703.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,679,546 samples, 0.36%)</title><rect x="97.0882%" y="677" width="0.3636%" height="15" fill="rgb(232,159,9)" fg:x="448504544" fg:w="1679546"/><text x="97.3382%" y="687.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,679,546 samples, 0.36%)</title><rect x="97.0882%" y="661" width="0.3636%" height="15" fill="rgb(210,39,32)" fg:x="448504544" fg:w="1679546"/><text x="97.3382%" y="671.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::_{{closure}} (1,679,546 samples, 0.36%)</title><rect x="97.0882%" y="645" width="0.3636%" height="15" fill="rgb(216,194,45)" fg:x="448504544" fg:w="1679546"/><text x="97.3382%" y="655.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1,679,546 samples, 0.36%)</title><rect x="97.0882%" y="629" width="0.3636%" height="15" fill="rgb(218,18,35)" fg:x="448504544" fg:w="1679546"/><text x="97.3382%" y="639.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1,679,546 samples, 0.36%)</title><rect x="97.0882%" y="613" width="0.3636%" height="15" fill="rgb(207,83,51)" fg:x="448504544" fg:w="1679546"/><text x="97.3382%" y="623.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1,679,546 samples, 0.36%)</title><rect x="97.0882%" y="597" width="0.3636%" height="15" fill="rgb(225,63,43)" fg:x="448504544" fg:w="1679546"/><text x="97.3382%" y="607.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (1,679,546 samples, 0.36%)</title><rect x="97.0882%" y="581" width="0.3636%" height="15" fill="rgb(207,57,36)" fg:x="448504544" fg:w="1679546"/><text x="97.3382%" y="591.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class_reverse_with_suffix (1,679,546 samples, 0.36%)</title><rect x="97.0882%" y="565" width="0.3636%" height="15" fill="rgb(216,99,33)" fg:x="448504544" fg:w="1679546"/><text x="97.3382%" y="575.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::put_value (1,495,555 samples, 0.32%)</title><rect x="97.4518%" y="981" width="0.3237%" height="15" fill="rgb(225,42,16)" fg:x="450184090" fg:w="1495555"/><text x="97.7018%" y="991.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (985,533 samples, 0.21%)</title><rect x="97.7756%" y="981" width="0.2133%" height="15" fill="rgb(220,201,45)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="991.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (985,533 samples, 0.21%)</title><rect x="97.7756%" y="965" width="0.2133%" height="15" fill="rgb(225,33,4)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="975.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (985,533 samples, 0.21%)</title><rect x="97.7756%" y="949" width="0.2133%" height="15" fill="rgb(224,33,50)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="959.50"></text></g><g><title>tokio::runtime::coop::budget (985,533 samples, 0.21%)</title><rect x="97.7756%" y="933" width="0.2133%" height="15" fill="rgb(246,198,51)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="943.50"></text></g><g><title>tokio::runtime::coop::with_budget (985,533 samples, 0.21%)</title><rect x="97.7756%" y="917" width="0.2133%" height="15" fill="rgb(205,22,4)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="927.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::_{{closure}} (985,533 samples, 0.21%)</title><rect x="97.7756%" y="901" width="0.2133%" height="15" fill="rgb(206,3,8)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="911.50"></text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (985,533 samples, 0.21%)</title><rect x="97.7756%" y="885" width="0.2133%" height="15" fill="rgb(251,23,15)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="895.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (985,533 samples, 0.21%)</title><rect x="97.7756%" y="869" width="0.2133%" height="15" fill="rgb(252,88,28)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="879.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (985,533 samples, 0.21%)</title><rect x="97.7756%" y="853" width="0.2133%" height="15" fill="rgb(212,127,14)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="863.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (985,533 samples, 0.21%)</title><rect x="97.7756%" y="837" width="0.2133%" height="15" fill="rgb(247,145,37)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="847.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (985,533 samples, 0.21%)</title><rect x="97.7756%" y="821" width="0.2133%" height="15" fill="rgb(209,117,53)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="831.50"></text></g><g><title>std::panic::catch_unwind (985,533 samples, 0.21%)</title><rect x="97.7756%" y="805" width="0.2133%" height="15" fill="rgb(212,90,42)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="815.50"></text></g><g><title>std::panicking::try (985,533 samples, 0.21%)</title><rect x="97.7756%" y="789" width="0.2133%" height="15" fill="rgb(218,164,37)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="799.50"></text></g><g><title>std::panicking::try::do_call (985,533 samples, 0.21%)</title><rect x="97.7756%" y="773" width="0.2133%" height="15" fill="rgb(246,65,34)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="783.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (985,533 samples, 0.21%)</title><rect x="97.7756%" y="757" width="0.2133%" height="15" fill="rgb(231,100,33)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="767.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (985,533 samples, 0.21%)</title><rect x="97.7756%" y="741" width="0.2133%" height="15" fill="rgb(228,126,14)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="751.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (985,533 samples, 0.21%)</title><rect x="97.7756%" y="725" width="0.2133%" height="15" fill="rgb(215,173,21)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="735.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (985,533 samples, 0.21%)</title><rect x="97.7756%" y="709" width="0.2133%" height="15" fill="rgb(210,6,40)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="719.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (985,533 samples, 0.21%)</title><rect x="97.7756%" y="693" width="0.2133%" height="15" fill="rgb(212,48,18)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="703.50"></text></g><g><title>emi_web::init_and_stream_tui::_{{closure}} (985,533 samples, 0.21%)</title><rect x="97.7756%" y="677" width="0.2133%" height="15" fill="rgb(230,214,11)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="687.50"></text></g><g><title>emi_web::read_buffer_with_retry_to_json (985,533 samples, 0.21%)</title><rect x="97.7756%" y="661" width="0.2133%" height="15" fill="rgb(254,105,39)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="671.50"></text></g><g><title>emi_web::parse_frame::Buffer::from_string (985,533 samples, 0.21%)</title><rect x="97.7756%" y="645" width="0.2133%" height="15" fill="rgb(245,158,5)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="655.50"></text></g><g><title>emi_web::parse_frame::Buffer::parse_area (985,533 samples, 0.21%)</title><rect x="97.7756%" y="629" width="0.2133%" height="15" fill="rgb(249,208,11)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="639.50"></text></g><g><title>&lt;emi_web::parse_frame::AREA_RE as core::ops::deref::Deref&gt;::deref (985,533 samples, 0.21%)</title><rect x="97.7756%" y="613" width="0.2133%" height="15" fill="rgb(210,39,28)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="623.50"></text></g><g><title>&lt;emi_web::parse_frame::AREA_RE as core::ops::deref::Deref&gt;::deref::__stability (985,533 samples, 0.21%)</title><rect x="97.7756%" y="597" width="0.2133%" height="15" fill="rgb(211,56,53)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="607.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (985,533 samples, 0.21%)</title><rect x="97.7756%" y="581" width="0.2133%" height="15" fill="rgb(226,201,30)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="591.50"></text></g><g><title>std::sync::once::Once::call_once (985,533 samples, 0.21%)</title><rect x="97.7756%" y="565" width="0.2133%" height="15" fill="rgb(239,101,34)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="575.50"></text></g><g><title>std::sys::sync::once::futex::Once::call (985,533 samples, 0.21%)</title><rect x="97.7756%" y="549" width="0.2133%" height="15" fill="rgb(226,209,5)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="559.50"></text></g><g><title>std::sync::once::Once::call_once::_{{closure}} (985,533 samples, 0.21%)</title><rect x="97.7756%" y="533" width="0.2133%" height="15" fill="rgb(250,105,47)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="543.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get::_{{closure}} (985,533 samples, 0.21%)</title><rect x="97.7756%" y="517" width="0.2133%" height="15" fill="rgb(230,72,3)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="527.50"></text></g><g><title>core::ops::function::FnOnce::call_once (985,533 samples, 0.21%)</title><rect x="97.7756%" y="501" width="0.2133%" height="15" fill="rgb(232,218,39)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="511.50"></text></g><g><title>&lt;emi_web::parse_frame::AREA_RE as core::ops::deref::Deref&gt;::deref::__static_ref_initialize (985,533 samples, 0.21%)</title><rect x="97.7756%" y="485" width="0.2133%" height="15" fill="rgb(248,166,6)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="495.50"></text></g><g><title>regex::regex::string::Regex::new (985,533 samples, 0.21%)</title><rect x="97.7756%" y="469" width="0.2133%" height="15" fill="rgb(247,89,20)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="479.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (985,533 samples, 0.21%)</title><rect x="97.7756%" y="453" width="0.2133%" height="15" fill="rgb(248,130,54)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="463.50"></text></g><g><title>regex::builders::Builder::build_one_string (985,533 samples, 0.21%)</title><rect x="97.7756%" y="437" width="0.2133%" height="15" fill="rgb(234,196,4)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="447.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (985,533 samples, 0.21%)</title><rect x="97.7756%" y="421" width="0.2133%" height="15" fill="rgb(250,143,31)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="431.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (985,533 samples, 0.21%)</title><rect x="97.7756%" y="405" width="0.2133%" height="15" fill="rgb(211,110,34)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (985,533 samples, 0.21%)</title><rect x="97.7756%" y="389" width="0.2133%" height="15" fill="rgb(215,124,48)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="399.50"></text></g><g><title>regex_automata::meta::strategy::new (985,533 samples, 0.21%)</title><rect x="97.7756%" y="373" width="0.2133%" height="15" fill="rgb(216,46,13)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="383.50"></text></g><g><title>regex_automata::meta::strategy::Core::new (985,533 samples, 0.21%)</title><rect x="97.7756%" y="357" width="0.2133%" height="15" fill="rgb(205,184,25)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (985,533 samples, 0.21%)</title><rect x="97.7756%" y="341" width="0.2133%" height="15" fill="rgb(228,1,10)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (985,533 samples, 0.21%)</title><rect x="97.7756%" y="325" width="0.2133%" height="15" fill="rgb(213,116,27)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (985,533 samples, 0.21%)</title><rect x="97.7756%" y="309" width="0.2133%" height="15" fill="rgb(241,95,50)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt; (985,533 samples, 0.21%)</title><rect x="97.7756%" y="293" width="0.2133%" height="15" fill="rgb(238,48,32)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::map::Utf8BoundedMap&gt; (985,533 samples, 0.21%)</title><rect x="97.7756%" y="277" width="0.2133%" height="15" fill="rgb(235,113,49)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::map::Utf8BoundedEntry&gt;&gt; (985,533 samples, 0.21%)</title><rect x="97.7756%" y="261" width="0.2133%" height="15" fill="rgb(205,127,43)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;regex_automata::nfa::thompson::map::Utf8BoundedEntry&gt;&gt; (985,533 samples, 0.21%)</title><rect x="97.7756%" y="245" width="0.2133%" height="15" fill="rgb(250,162,2)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (985,533 samples, 0.21%)</title><rect x="97.7756%" y="229" width="0.2133%" height="15" fill="rgb(220,13,41)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (985,533 samples, 0.21%)</title><rect x="97.7756%" y="213" width="0.2133%" height="15" fill="rgb(249,221,25)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (985,533 samples, 0.21%)</title><rect x="97.7756%" y="197" width="0.2133%" height="15" fill="rgb(215,208,19)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (985,533 samples, 0.21%)</title><rect x="97.7756%" y="181" width="0.2133%" height="15" fill="rgb(236,175,2)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="191.50"></text></g><g><title>cfree (985,533 samples, 0.21%)</title><rect x="97.7756%" y="165" width="0.2133%" height="15" fill="rgb(241,52,2)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="175.50"></text></g><g><title>[libc.so.6] (985,533 samples, 0.21%)</title><rect x="97.7756%" y="149" width="0.2133%" height="15" fill="rgb(248,140,14)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="159.50"></text></g><g><title>[libc.so.6] (985,533 samples, 0.21%)</title><rect x="97.7756%" y="133" width="0.2133%" height="15" fill="rgb(253,22,42)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="143.50"></text></g><g><title>[libc.so.6] (985,533 samples, 0.21%)</title><rect x="97.7756%" y="117" width="0.2133%" height="15" fill="rgb(234,61,47)" fg:x="451679645" fg:w="985533"/><text x="98.0256%" y="127.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (5,733,492 samples, 1.24%)</title><rect x="97.9889%" y="981" width="1.2411%" height="15" fill="rgb(208,226,15)" fg:x="452665178" fg:w="5733492"/><text x="98.2389%" y="991.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (1,507,134 samples, 0.33%)</title><rect x="99.2300%" y="981" width="0.3263%" height="15" fill="rgb(217,221,4)" fg:x="458398670" fg:w="1507134"/><text x="99.4800%" y="991.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1,507,134 samples, 0.33%)</title><rect x="99.2300%" y="965" width="0.3263%" height="15" fill="rgb(212,174,34)" fg:x="458398670" fg:w="1507134"/><text x="99.4800%" y="975.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (1,507,134 samples, 0.33%)</title><rect x="99.2300%" y="949" width="0.3263%" height="15" fill="rgb(253,83,4)" fg:x="458398670" fg:w="1507134"/><text x="99.4800%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::TaskIdGuard&gt; (1,507,134 samples, 0.33%)</title><rect x="99.2300%" y="933" width="0.3263%" height="15" fill="rgb(250,195,49)" fg:x="458398670" fg:w="1507134"/><text x="99.4800%" y="943.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="965" width="0.3281%" height="15" fill="rgb(241,192,25)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="975.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="949" width="0.3281%" height="15" fill="rgb(208,124,10)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="959.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="933" width="0.3281%" height="15" fill="rgb(222,33,0)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="943.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="917" width="0.3281%" height="15" fill="rgb(234,209,28)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="927.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="901" width="0.3281%" height="15" fill="rgb(224,11,23)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="911.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="885" width="0.3281%" height="15" fill="rgb(232,99,1)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="895.50"></text></g><g><title>tokio::runtime::coop::budget (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="869" width="0.3281%" height="15" fill="rgb(237,95,45)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="879.50"></text></g><g><title>tokio::runtime::coop::with_budget (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="853" width="0.3281%" height="15" fill="rgb(208,109,11)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="863.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::_{{closure}} (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="837" width="0.3281%" height="15" fill="rgb(216,190,48)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="847.50"></text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="821" width="0.3281%" height="15" fill="rgb(251,171,36)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="831.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="805" width="0.3281%" height="15" fill="rgb(230,62,22)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="815.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="789" width="0.3281%" height="15" fill="rgb(225,114,35)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="799.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="773" width="0.3281%" height="15" fill="rgb(215,118,42)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="783.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="757" width="0.3281%" height="15" fill="rgb(243,119,21)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="767.50"></text></g><g><title>std::panic::catch_unwind (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="741" width="0.3281%" height="15" fill="rgb(252,177,53)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="751.50"></text></g><g><title>std::panicking::try (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="725" width="0.3281%" height="15" fill="rgb(237,209,29)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="735.50"></text></g><g><title>std::panicking::try::do_call (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="709" width="0.3281%" height="15" fill="rgb(212,65,23)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="719.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="693" width="0.3281%" height="15" fill="rgb(230,222,46)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="703.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="677" width="0.3281%" height="15" fill="rgb(215,135,32)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="687.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="661" width="0.3281%" height="15" fill="rgb(246,101,22)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="671.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="645" width="0.3281%" height="15" fill="rgb(206,107,13)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="655.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="629" width="0.3281%" height="15" fill="rgb(250,100,44)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="639.50"></text></g><g><title>emi_web::init_and_stream_tui::_{{closure}} (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="613" width="0.3281%" height="15" fill="rgb(231,147,38)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="623.50"></text></g><g><title>emi_web::read_buffer_with_retry_to_json (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="597" width="0.3281%" height="15" fill="rgb(229,8,40)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="607.50"></text></g><g><title>emi_web::parse_frame::Buffer::from_string (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="581" width="0.3281%" height="15" fill="rgb(221,135,30)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="591.50"></text></g><g><title>emi_web::parse_frame::Buffer::parse_styles (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="565" width="0.3281%" height="15" fill="rgb(249,193,18)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="575.50"></text></g><g><title>&lt;emi_web::parse_frame::STYLES_RE as core::ops::deref::Deref&gt;::deref (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="549" width="0.3281%" height="15" fill="rgb(209,133,39)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="559.50"></text></g><g><title>&lt;emi_web::parse_frame::STYLES_RE as core::ops::deref::Deref&gt;::deref::__stability (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="533" width="0.3281%" height="15" fill="rgb(232,100,14)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="543.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="517" width="0.3281%" height="15" fill="rgb(224,185,1)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="527.50"></text></g><g><title>std::sync::once::Once::call_once (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="501" width="0.3281%" height="15" fill="rgb(223,139,8)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="511.50"></text></g><g><title>std::sys::sync::once::futex::Once::call (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="485" width="0.3281%" height="15" fill="rgb(232,213,38)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="495.50"></text></g><g><title>std::sync::once::Once::call_once::_{{closure}} (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="469" width="0.3281%" height="15" fill="rgb(207,94,22)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="479.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get::_{{closure}} (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="453" width="0.3281%" height="15" fill="rgb(219,183,54)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="463.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="437" width="0.3281%" height="15" fill="rgb(216,185,54)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="447.50"></text></g><g><title>&lt;emi_web::parse_frame::STYLES_RE as core::ops::deref::Deref&gt;::deref::__static_ref_initialize (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="421" width="0.3281%" height="15" fill="rgb(254,217,39)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="431.50"></text></g><g><title>regex::regex::string::Regex::new (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="405" width="0.3281%" height="15" fill="rgb(240,178,23)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="415.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="389" width="0.3281%" height="15" fill="rgb(218,11,47)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="399.50"></text></g><g><title>regex::builders::Builder::build_one_string (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="373" width="0.3281%" height="15" fill="rgb(218,51,51)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="357" width="0.3281%" height="15" fill="rgb(238,126,27)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="341" width="0.3281%" height="15" fill="rgb(249,202,22)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="351.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="325" width="0.3281%" height="15" fill="rgb(254,195,49)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="335.50"></text></g><g><title>regex_automata::meta::strategy::new (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="309" width="0.3281%" height="15" fill="rgb(208,123,14)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="319.50"></text></g><g><title>regex_automata::meta::strategy::Core::new (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="293" width="0.3281%" height="15" fill="rgb(224,200,8)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="277" width="0.3281%" height="15" fill="rgb(217,61,36)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="261" width="0.3281%" height="15" fill="rgb(206,35,45)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="245" width="0.3281%" height="15" fill="rgb(217,65,33)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt; (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="229" width="0.3281%" height="15" fill="rgb(222,158,48)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::map::Utf8BoundedMap&gt; (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="213" width="0.3281%" height="15" fill="rgb(254,2,54)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::map::Utf8BoundedEntry&gt;&gt; (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="197" width="0.3281%" height="15" fill="rgb(250,143,38)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="181" width="0.3281%" height="15" fill="rgb(248,25,0)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;[regex_automata::nfa::thompson::map::Utf8BoundedEntry]&gt; (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="165" width="0.3281%" height="15" fill="rgb(206,152,27)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::map::Utf8BoundedEntry&gt; (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="149" width="0.3281%" height="15" fill="rgb(240,77,30)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::nfa::Transition&gt;&gt; (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="133" width="0.3281%" height="15" fill="rgb(231,5,3)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;regex_automata::nfa::thompson::nfa::Transition&gt;&gt; (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="117" width="0.3281%" height="15" fill="rgb(207,226,32)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="127.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="101" width="0.3281%" height="15" fill="rgb(222,207,47)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="85" width="0.3281%" height="15" fill="rgb(229,115,45)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="95.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="69" width="0.3281%" height="15" fill="rgb(224,191,6)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="79.50"></text></g><g><title>alloc::alloc::dealloc (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="53" width="0.3281%" height="15" fill="rgb(230,227,24)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="63.50"></text></g><g><title>cfree (1,515,519 samples, 0.33%)</title><rect x="99.5563%" y="37" width="0.3281%" height="15" fill="rgb(228,80,19)" fg:x="459905804" fg:w="1515519"/><text x="99.8063%" y="47.50"></text></g><g><title>all (461,955,610 samples, 100%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(247,229,0)" fg:x="0" fg:w="461955610"/><text x="0.2500%" y="1023.50"></text></g><g><title>tokio-runtime-w (460,278,155 samples, 99.64%)</title><rect x="0.3631%" y="997" width="99.6369%" height="15" fill="rgb(237,194,15)" fg:x="1677455" fg:w="460278155"/><text x="0.6131%" y="1007.50">tokio-runtime-w</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (2,049,806 samples, 0.44%)</title><rect x="99.5563%" y="981" width="0.4437%" height="15" fill="rgb(219,203,20)" fg:x="459905804" fg:w="2049806"/><text x="99.8063%" y="991.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (534,287 samples, 0.12%)</title><rect x="99.8843%" y="965" width="0.1157%" height="15" fill="rgb(234,128,8)" fg:x="461421323" fg:w="534287"/><text x="100.1343%" y="975.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (534,287 samples, 0.12%)</title><rect x="99.8843%" y="949" width="0.1157%" height="15" fill="rgb(248,202,8)" fg:x="461421323" fg:w="534287"/><text x="100.1343%" y="959.50"></text></g><g><title>std::panic::catch_unwind (534,287 samples, 0.12%)</title><rect x="99.8843%" y="933" width="0.1157%" height="15" fill="rgb(206,104,37)" fg:x="461421323" fg:w="534287"/><text x="100.1343%" y="943.50"></text></g><g><title>std::panicking::try (534,287 samples, 0.12%)</title><rect x="99.8843%" y="917" width="0.1157%" height="15" fill="rgb(223,8,27)" fg:x="461421323" fg:w="534287"/><text x="100.1343%" y="927.50"></text></g><g><title>std::panicking::try::do_call (534,287 samples, 0.12%)</title><rect x="99.8843%" y="901" width="0.1157%" height="15" fill="rgb(216,217,28)" fg:x="461421323" fg:w="534287"/><text x="100.1343%" y="911.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (534,287 samples, 0.12%)</title><rect x="99.8843%" y="885" width="0.1157%" height="15" fill="rgb(249,199,1)" fg:x="461421323" fg:w="534287"/><text x="100.1343%" y="895.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (534,287 samples, 0.12%)</title><rect x="99.8843%" y="869" width="0.1157%" height="15" fill="rgb(240,85,17)" fg:x="461421323" fg:w="534287"/><text x="100.1343%" y="879.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (534,287 samples, 0.12%)</title><rect x="99.8843%" y="853" width="0.1157%" height="15" fill="rgb(206,108,45)" fg:x="461421323" fg:w="534287"/><text x="100.1343%" y="863.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (534,287 samples, 0.12%)</title><rect x="99.8843%" y="837" width="0.1157%" height="15" fill="rgb(245,210,41)" fg:x="461421323" fg:w="534287"/><text x="100.1343%" y="847.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (534,287 samples, 0.12%)</title><rect x="99.8843%" y="821" width="0.1157%" height="15" fill="rgb(206,13,37)" fg:x="461421323" fg:w="534287"/><text x="100.1343%" y="831.50"></text></g><g><title>&lt;axum::serve::Serve&lt;M,S&gt; as core::future::into_future::IntoFuture&gt;::into_future::_{{closure}}::_{{closure}} (534,287 samples, 0.12%)</title><rect x="99.8843%" y="805" width="0.1157%" height="15" fill="rgb(250,61,18)" fg:x="461421323" fg:w="534287"/><text x="100.1343%" y="815.50"></text></g><g><title>&lt;hyper_util::server::conn::auto::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (534,287 samples, 0.12%)</title><rect x="99.8843%" y="789" width="0.1157%" height="15" fill="rgb(235,172,48)" fg:x="461421323" fg:w="534287"/><text x="100.1343%" y="799.50"></text></g><g><title>&lt;hyper::server::conn::http1::UpgradeableConnection&lt;I,S&gt; as core::future::future::Future&gt;::poll (534,287 samples, 0.12%)</title><rect x="99.8843%" y="773" width="0.1157%" height="15" fill="rgb(249,201,17)" fg:x="461421323" fg:w="534287"/><text x="100.1343%" y="783.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future::Future&gt;::poll (534,287 samples, 0.12%)</title><rect x="99.8843%" y="757" width="0.1157%" height="15" fill="rgb(219,208,6)" fg:x="461421323" fg:w="534287"/><text x="100.1343%" y="767.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (534,287 samples, 0.12%)</title><rect x="99.8843%" y="741" width="0.1157%" height="15" fill="rgb(248,31,23)" fg:x="461421323" fg:w="534287"/><text x="100.1343%" y="751.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner (534,287 samples, 0.12%)</title><rect x="99.8843%" y="725" width="0.1157%" height="15" fill="rgb(245,15,42)" fg:x="461421323" fg:w="534287"/><text x="100.1343%" y="735.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (534,287 samples, 0.12%)</title><rect x="99.8843%" y="709" width="0.1157%" height="15" fill="rgb(222,217,39)" fg:x="461421323" fg:w="534287"/><text x="100.1343%" y="719.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read (534,287 samples, 0.12%)</title><rect x="99.8843%" y="693" width="0.1157%" height="15" fill="rgb(210,219,27)" fg:x="461421323" fg:w="534287"/><text x="100.1343%" y="703.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read_head (534,287 samples, 0.12%)</title><rect x="99.8843%" y="677" width="0.1157%" height="15" fill="rgb(252,166,36)" fg:x="461421323" fg:w="534287"/><text x="100.1343%" y="687.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (534,287 samples, 0.12%)</title><rect x="99.8843%" y="661" width="0.1157%" height="15" fill="rgb(245,132,34)" fg:x="461421323" fg:w="534287"/><text x="100.1343%" y="671.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::parse (534,287 samples, 0.12%)</title><rect x="99.8843%" y="645" width="0.1157%" height="15" fill="rgb(236,54,3)" fg:x="461421323" fg:w="534287"/><text x="100.1343%" y="655.50"></text></g><g><title>hyper::proto::h1::role::parse_headers (534,287 samples, 0.12%)</title><rect x="99.8843%" y="629" width="0.1157%" height="15" fill="rgb(241,173,43)" fg:x="461421323" fg:w="534287"/><text x="100.1343%" y="639.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::parse (534,287 samples, 0.12%)</title><rect x="99.8843%" y="613" width="0.1157%" height="15" fill="rgb(215,190,9)" fg:x="461421323" fg:w="534287"/><text x="100.1343%" y="623.50"></text></g><g><title>http::header::name::HeaderName::from_bytes (534,287 samples, 0.12%)</title><rect x="99.8843%" y="597" width="0.1157%" height="15" fill="rgb(242,101,16)" fg:x="461421323" fg:w="534287"/><text x="100.1343%" y="607.50"></text></g><g><title>http::header::name::parse_hdr (534,287 samples, 0.12%)</title><rect x="99.8843%" y="581" width="0.1157%" height="15" fill="rgb(223,190,21)" fg:x="461421323" fg:w="534287"/><text x="100.1343%" y="591.50"></text></g><g><title>http::header::name::StandardHeader::from_bytes (534,287 samples, 0.12%)</title><rect x="99.8843%" y="565" width="0.1157%" height="15" fill="rgb(215,228,25)" fg:x="461421323" fg:w="534287"/><text x="100.1343%" y="575.50"></text></g></svg></svg>